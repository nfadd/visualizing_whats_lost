{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';\nimport { g as getElementRoot } from './helpers.js';\nconst pickerInternalIosCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-highlight{background:var(--ion-color-step-150, #eeeeef)}\";\nconst pickerInternalMdCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 30%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}\";\nconst PickerInternal = /*@__PURE__*/proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    var _this;\n\n    super();\n    _this = this;\n\n    this.__registerHost();\n\n    this.__attachShadow();\n\n    this.ionInputModeChange = createEvent(this, \"ionInputModeChange\", 7);\n    this.useInputMode = false;\n\n    this.isInHighlightBounds = ev => {\n      const {\n        highlightEl\n      } = this;\n\n      if (!highlightEl) {\n        return false;\n      }\n\n      const bbox = highlightEl.getBoundingClientRect();\n      /**\n       * Check to see if the user clicked\n       * outside the bounds of the highlight.\n       */\n\n      const outsideX = ev.clientX < bbox.left || ev.clientX > bbox.right;\n      const outsideY = ev.clientY < bbox.top || ev.clientY > bbox.bottom;\n\n      if (outsideX || outsideY) {\n        return false;\n      }\n\n      return true;\n    };\n    /**\n     * If we are no longer focused\n     * on a picker column, then we should\n     * exit input mode. An exception is made\n     * for the input in the picker since having\n     * that focused means we are still in input mode.\n     */\n\n\n    this.onFocusOut = ev => {\n      const {\n        relatedTarget\n      } = ev;\n\n      if (!relatedTarget || relatedTarget.tagName !== 'ION-PICKER-COLUMN-INTERNAL' && relatedTarget !== this.inputEl) {\n        this.exitInputMode();\n      }\n    };\n    /**\n     * When picker columns receive focus\n     * the parent picker needs to determine\n     * whether to enter/exit input mode.\n     */\n\n\n    this.onFocusIn = ev => {\n      const {\n        target\n      } = ev;\n      /**\n       * Due to browser differences in how/when focus\n       * is dispatched on certain elements, we need to\n       * make sure that this function only ever runs when\n       * focusing a picker column.\n       */\n\n      if (target.tagName !== 'ION-PICKER-COLUMN-INTERNAL') {\n        return;\n      }\n      /**\n       * If we have actionOnClick\n       * then this means the user focused\n       * a picker column via mouse or\n       * touch (i.e. a PointerEvent). As a result,\n       * we should not enter/exit input mode\n       * until the click event has fired, which happens\n       * after the `focusin` event.\n       *\n       * Otherwise, the user likely focused\n       * the column using their keyboard and\n       * we should enter/exit input mode automatically.\n       */\n\n\n      if (!this.actionOnClick) {\n        const columnEl = target;\n        const allowInput = columnEl.numericInput;\n\n        if (allowInput) {\n          this.enterInputMode(columnEl, false);\n        } else {\n          this.exitInputMode();\n        }\n      }\n    };\n    /**\n     * On click we need to run an actionOnClick\n     * function that has been set in onPointerDown\n     * so that we enter/exit input mode correctly.\n     */\n\n\n    this.onClick = () => {\n      const {\n        actionOnClick\n      } = this;\n\n      if (actionOnClick) {\n        actionOnClick();\n        this.actionOnClick = undefined;\n      }\n    };\n    /**\n     * Clicking a column also focuses the column on\n     * certain browsers, so we use onPointerDown\n     * to tell the onFocusIn function that users\n     * are trying to click the column rather than\n     * focus the column using the keyboard. When the\n     * user completes the click, the onClick function\n     * runs and runs the actionOnClick callback.\n     */\n\n\n    this.onPointerDown = ev => {\n      const {\n        useInputMode,\n        inputModeColumn,\n        el\n      } = this;\n\n      if (this.isInHighlightBounds(ev)) {\n        /**\n         * If we were already in\n         * input mode, then we should determine\n         * if we tapped a particular column and\n         * should switch to input mode for\n         * that specific column.\n         */\n        if (useInputMode) {\n          /**\n           * If we tapped a picker column\n           * then we should either switch to input\n           * mode for that column or all columns.\n           * Otherwise we should exit input mode\n           * since we just tapped the highlight and\n           * not a column.\n           */\n          if (ev.target.tagName === 'ION-PICKER-COLUMN-INTERNAL') {\n            /**\n             * If user taps 2 different columns\n             * then we should just switch to input mode\n             * for the new column rather than switching to\n             * input mode for all columns.\n             */\n            if (inputModeColumn && inputModeColumn === ev.target) {\n              this.actionOnClick = () => {\n                this.enterInputMode();\n              };\n            } else {\n              this.actionOnClick = () => {\n                this.enterInputMode(ev.target);\n              };\n            }\n          } else {\n            this.actionOnClick = () => {\n              this.exitInputMode();\n            };\n          }\n          /**\n           * If we were not already in\n           * input mode, then we should\n           * enter input mode for all columns.\n           */\n\n        } else {\n          /**\n           * If there is only 1 numeric input column\n           * then we should skip multi column input.\n           */\n          const columns = el.querySelectorAll('ion-picker-column-internal.picker-column-numeric-input');\n          const columnEl = columns.length === 1 ? ev.target : undefined;\n\n          this.actionOnClick = () => {\n            this.enterInputMode(columnEl);\n          };\n        }\n\n        return;\n      }\n\n      this.actionOnClick = () => {\n        this.exitInputMode();\n      };\n    };\n    /**\n     * Enters input mode to allow\n     * for text entry of numeric values.\n     * If on mobile, we focus a hidden input\n     * field so that the on screen keyboard\n     * is brought up. When tabbing using a\n     * keyboard, picker columns receive an outline\n     * to indicate they are focused. As a result,\n     * we should not focus the hidden input as it\n     * would cause the outline to go away, preventing\n     * users from having any visual indication of which\n     * column is focused.\n     */\n\n\n    this.enterInputMode = function (columnEl) {\n      let focusInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const {\n        inputEl,\n        el\n      } = _this;\n\n      if (!inputEl) {\n        return;\n      }\n      /**\n       * Only active input mode if there is at\n       * least one column that accepts numeric input.\n       */\n\n\n      const hasInputColumn = el.querySelector('ion-picker-column-internal.picker-column-numeric-input');\n\n      if (!hasInputColumn) {\n        return;\n      }\n      /**\n       * If columnEl is undefined then\n       * it is assumed that all numeric pickers\n       * are eligible for text entry.\n       * (i.e. hour and minute columns)\n       */\n\n\n      _this.useInputMode = true;\n      _this.inputModeColumn = columnEl;\n      /**\n       * Users with a keyboard and mouse can\n       * activate input mode where the input is\n       * focused as well as when it is not focused,\n       * so we need to make sure we clean up any\n       * old listeners.\n       */\n\n      if (focusInput) {\n        if (_this.destroyKeypressListener) {\n          _this.destroyKeypressListener();\n\n          _this.destroyKeypressListener = undefined;\n        }\n\n        inputEl.focus();\n      } else {\n        el.addEventListener('keypress', _this.onKeyPress);\n\n        _this.destroyKeypressListener = () => {\n          el.removeEventListener('keypress', _this.onKeyPress);\n        };\n      }\n\n      _this.emitInputModeChange();\n    };\n\n    this.exitInputMode = () => {\n      const {\n        inputEl,\n        useInputMode\n      } = this;\n\n      if (!useInputMode || !inputEl) {\n        return;\n      }\n\n      this.useInputMode = false;\n      this.inputModeColumn = undefined;\n      inputEl.blur();\n      inputEl.value = '';\n\n      if (this.destroyKeypressListener) {\n        this.destroyKeypressListener();\n        this.destroyKeypressListener = undefined;\n      }\n\n      this.emitInputModeChange();\n    };\n\n    this.onKeyPress = ev => {\n      const {\n        inputEl\n      } = this;\n\n      if (!inputEl) {\n        return;\n      }\n\n      const parsedValue = parseInt(ev.key, 10);\n      /**\n       * Only numbers should be allowed\n       */\n\n      if (!Number.isNaN(parsedValue)) {\n        inputEl.value += ev.key;\n        this.onInputChange();\n      }\n    };\n\n    this.selectSingleColumn = () => {\n      const {\n        inputEl,\n        inputModeColumn,\n        singleColumnSearchTimeout\n      } = this;\n\n      if (!inputEl || !inputModeColumn) {\n        return;\n      }\n\n      const values = inputModeColumn.items;\n      /**\n       * If users pause for a bit, the search\n       * value should be reset similar to how a\n       * <select> behaves. So typing \"34\", waiting,\n       * then typing \"5\" should select \"05\".\n       */\n\n      if (singleColumnSearchTimeout) {\n        clearTimeout(singleColumnSearchTimeout);\n      }\n\n      this.singleColumnSearchTimeout = setTimeout(() => {\n        inputEl.value = '';\n        this.singleColumnSearchTimeout = undefined;\n      }, 1000);\n      /**\n       * For values that are longer than 2 digits long\n       * we should shift the value over 1 character\n       * to the left. So typing \"456\" would result in \"56\".\n       * TODO: If we want to support more than just\n       * time entry, we should update this value to be\n       * the max length of all of the picker items.\n       */\n\n      if (inputEl.value.length >= 3) {\n        const startIndex = inputEl.value.length - 2;\n        const newString = inputEl.value.substring(startIndex);\n        inputEl.value = newString;\n        this.selectSingleColumn();\n        return;\n      }\n      /**\n       * Checking the value of the input gets priority\n       * first. For example, if the value of the input\n       * is \"1\" and we entered \"2\", then the complete value\n       * is \"12\" and we should select hour 12.\n       *\n       * Regex removes any leading zeros from values like \"02\".\n       */\n\n\n      const findItemFromCompleteValue = values.find(_ref => {\n        let {\n          text\n        } = _ref;\n        return text.replace(/^0+/, '') === inputEl.value;\n      });\n\n      if (findItemFromCompleteValue) {\n        inputModeColumn.value = findItemFromCompleteValue.value;\n        return;\n      }\n      /**\n       * If we typed \"56\" to get minute 56, then typed \"7\",\n       * we should select \"07\" as \"567\" is not a valid minute.\n       */\n\n\n      if (inputEl.value.length === 2) {\n        const changedCharacter = inputEl.value.substring(inputEl.value.length - 1);\n        inputEl.value = changedCharacter;\n        this.selectSingleColumn();\n      }\n    };\n    /**\n     * Searches a list of column items for a particular\n     * value. This is currently used for numeric values.\n     * The zeroBehavior can be set to account for leading\n     * or trailing zeros when looking at the item text.\n     */\n\n\n    this.searchColumn = function (colEl, value) {\n      let zeroBehavior = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'start';\n      const behavior = zeroBehavior === 'start' ? /^0+/ : /0$/;\n      const item = colEl.items.find(_ref2 => {\n        let {\n          text\n        } = _ref2;\n        return text.replace(behavior, '') === value;\n      });\n\n      if (item) {\n        colEl.value = item.value;\n      }\n    };\n\n    this.selectMultiColumn = () => {\n      const {\n        inputEl,\n        el\n      } = this;\n\n      if (!inputEl) {\n        return;\n      }\n\n      const numericPickers = Array.from(el.querySelectorAll('ion-picker-column-internal')).filter(col => col.numericInput);\n      const firstColumn = numericPickers[0];\n      const lastColumn = numericPickers[1];\n      let value = inputEl.value;\n      let minuteValue;\n\n      switch (value.length) {\n        case 1:\n          this.searchColumn(firstColumn, value);\n          break;\n\n        case 2:\n          /**\n           * If the first character is `0` or `1` it is\n           * possible that users are trying to type `09`\n           * or `11` into the hour field, so we should look\n           * at that first.\n           */\n          const firstCharacter = inputEl.value.substring(0, 1);\n          value = firstCharacter === '0' || firstCharacter === '1' ? inputEl.value : firstCharacter;\n          this.searchColumn(firstColumn, value);\n          /**\n           * If only checked the first value,\n           * we can check the second value\n           * for a match in the minutes column\n           */\n\n          if (value.length === 1) {\n            minuteValue = inputEl.value.substring(inputEl.value.length - 1);\n            this.searchColumn(lastColumn, minuteValue, 'end');\n          }\n\n          break;\n\n        case 3:\n          /**\n           * If the first character is `0` or `1` it is\n           * possible that users are trying to type `09`\n           * or `11` into the hour field, so we should look\n           * at that first.\n           */\n          const firstCharacterAgain = inputEl.value.substring(0, 1);\n          value = firstCharacterAgain === '0' || firstCharacterAgain === '1' ? inputEl.value.substring(0, 2) : firstCharacterAgain;\n          this.searchColumn(firstColumn, value);\n          /**\n           * If only checked the first value,\n           * we can check the second value\n           * for a match in the minutes column\n           */\n\n          minuteValue = value.length === 1 ? inputEl.value.substring(1) : inputEl.value.substring(2);\n          this.searchColumn(lastColumn, minuteValue, 'end');\n          break;\n\n        case 4:\n          /**\n           * If the first character is `0` or `1` it is\n           * possible that users are trying to type `09`\n           * or `11` into the hour field, so we should look\n           * at that first.\n           */\n          const firstCharacterAgainAgain = inputEl.value.substring(0, 1);\n          value = firstCharacterAgainAgain === '0' || firstCharacterAgainAgain === '1' ? inputEl.value.substring(0, 2) : firstCharacterAgainAgain;\n          this.searchColumn(firstColumn, value);\n          /**\n           * If only checked the first value,\n           * we can check the second value\n           * for a match in the minutes column\n           */\n\n          const minuteValueAgain = value.length === 1 ? inputEl.value.substring(1, inputEl.value.length) : inputEl.value.substring(2, inputEl.value.length);\n          this.searchColumn(lastColumn, minuteValueAgain, 'end');\n          break;\n\n        default:\n          const startIndex = inputEl.value.length - 4;\n          const newString = inputEl.value.substring(startIndex);\n          inputEl.value = newString;\n          this.selectMultiColumn();\n          break;\n      }\n    };\n    /**\n     * Searches the value of the active column\n     * to determine which value users are trying\n     * to select\n     */\n\n\n    this.onInputChange = () => {\n      const {\n        useInputMode,\n        inputEl,\n        inputModeColumn\n      } = this;\n\n      if (!useInputMode || !inputEl) {\n        return;\n      }\n\n      if (inputModeColumn) {\n        this.selectSingleColumn();\n      } else {\n        this.selectMultiColumn();\n      }\n    };\n    /**\n     * Emit ionInputModeChange. Picker columns\n     * listen for this event to determine whether\n     * or not their column is \"active\" for text input.\n     */\n\n\n    this.emitInputModeChange = () => {\n      const {\n        useInputMode,\n        inputModeColumn\n      } = this;\n      this.ionInputModeChange.emit({\n        useInputMode,\n        inputModeColumn\n      });\n    };\n  }\n\n  componentWillLoad() {\n    getElementRoot(this.el).addEventListener('focusin', this.onFocusIn);\n    getElementRoot(this.el).addEventListener('focusout', this.onFocusOut);\n  }\n\n  render() {\n    return h(Host, {\n      onPointerDown: ev => this.onPointerDown(ev),\n      onClick: () => this.onClick()\n    }, h(\"input\", {\n      \"aria-hidden\": \"true\",\n      tabindex: -1,\n      inputmode: \"numeric\",\n      type: \"number\",\n      ref: el => this.inputEl = el,\n      onInput: () => this.onInputChange(),\n      onBlur: () => this.exitInputMode()\n    }), h(\"div\", {\n      class: \"picker-before\"\n    }), h(\"div\", {\n      class: \"picker-after\"\n    }), h(\"div\", {\n      class: \"picker-highlight\",\n      ref: el => this.highlightEl = el\n    }), h(\"slot\", null));\n  }\n\n  get el() {\n    return this;\n  }\n\n  static get style() {\n    return {\n      ios: pickerInternalIosCss,\n      md: pickerInternalMdCss\n    };\n  }\n\n}, [33, \"ion-picker-internal\"]);\n\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  const components = [\"ion-picker-internal\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-picker-internal\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, PickerInternal);\n        }\n\n        break;\n    }\n  });\n}\n\nexport { PickerInternal as P, defineCustomElement as d };","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@ionic/core/components/picker-internal.js"],"names":["proxyCustomElement","HTMLElement","createEvent","h","Host","g","getElementRoot","pickerInternalIosCss","pickerInternalMdCss","PickerInternal","constructor","__registerHost","__attachShadow","ionInputModeChange","useInputMode","isInHighlightBounds","ev","highlightEl","bbox","getBoundingClientRect","outsideX","clientX","left","right","outsideY","clientY","top","bottom","onFocusOut","relatedTarget","tagName","inputEl","exitInputMode","onFocusIn","target","actionOnClick","columnEl","allowInput","numericInput","enterInputMode","onClick","undefined","onPointerDown","inputModeColumn","el","columns","querySelectorAll","length","focusInput","hasInputColumn","querySelector","destroyKeypressListener","focus","addEventListener","onKeyPress","removeEventListener","emitInputModeChange","blur","value","parsedValue","parseInt","key","Number","isNaN","onInputChange","selectSingleColumn","singleColumnSearchTimeout","values","items","clearTimeout","setTimeout","startIndex","newString","substring","findItemFromCompleteValue","find","text","replace","changedCharacter","searchColumn","colEl","zeroBehavior","behavior","item","selectMultiColumn","numericPickers","Array","from","filter","col","firstColumn","lastColumn","minuteValue","firstCharacter","firstCharacterAgain","firstCharacterAgainAgain","minuteValueAgain","emit","componentWillLoad","render","tabindex","inputmode","type","ref","onInput","onBlur","class","style","ios","md","defineCustomElement","customElements","components","forEach","get","define","P","d"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Host } from '@stencil/core/internal/client';\nimport { g as getElementRoot } from './helpers.js';\n\nconst pickerInternalIosCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(20%, var(--background, var(--ion-background-color, #fff))), to(rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%)}:host .picker-highlight{background:var(--ion-color-step-150, #eeeeef)}\";\n\nconst pickerInternalMdCss = \":host{display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:200px;direction:ltr;z-index:0}:host .picker-before,:host .picker-after{position:absolute;width:100%;z-index:1;pointer-events:none}:host .picker-before{left:0;top:0;height:83px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-after{left:0;top:116px;height:84px}:host-context([dir=rtl]){left:unset;right:unset;right:0}:host .picker-highlight{border-radius:8px;left:0;right:0;top:50%;bottom:0;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;position:absolute;width:calc(100% - 16px);height:34px;-webkit-transform:translateY(-50%);transform:translateY(-50%);z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .picker-highlight{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host input{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}:host ::slotted(ion-picker-column-internal:first-of-type){text-align:start}:host ::slotted(ion-picker-column-internal:last-of-type){text-align:end}:host .picker-before{background:-webkit-gradient(linear, left top, left bottom, color-stop(20%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}:host .picker-after{background:-webkit-gradient(linear, left bottom, left top, color-stop(30%, var(--background, var(--ion-background-color, #fff))), color-stop(90%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0)));background:linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 30%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0) 90%)}\";\n\nconst PickerInternal = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionInputModeChange = createEvent(this, \"ionInputModeChange\", 7);\n    this.useInputMode = false;\n    this.isInHighlightBounds = (ev) => {\n      const { highlightEl } = this;\n      if (!highlightEl) {\n        return false;\n      }\n      const bbox = highlightEl.getBoundingClientRect();\n      /**\n       * Check to see if the user clicked\n       * outside the bounds of the highlight.\n       */\n      const outsideX = ev.clientX < bbox.left || ev.clientX > bbox.right;\n      const outsideY = ev.clientY < bbox.top || ev.clientY > bbox.bottom;\n      if (outsideX || outsideY) {\n        return false;\n      }\n      return true;\n    };\n    /**\n     * If we are no longer focused\n     * on a picker column, then we should\n     * exit input mode. An exception is made\n     * for the input in the picker since having\n     * that focused means we are still in input mode.\n     */\n    this.onFocusOut = (ev) => {\n      const { relatedTarget } = ev;\n      if (!relatedTarget || (relatedTarget.tagName !== 'ION-PICKER-COLUMN-INTERNAL' && relatedTarget !== this.inputEl)) {\n        this.exitInputMode();\n      }\n    };\n    /**\n     * When picker columns receive focus\n     * the parent picker needs to determine\n     * whether to enter/exit input mode.\n     */\n    this.onFocusIn = (ev) => {\n      const { target } = ev;\n      /**\n       * Due to browser differences in how/when focus\n       * is dispatched on certain elements, we need to\n       * make sure that this function only ever runs when\n       * focusing a picker column.\n       */\n      if (target.tagName !== 'ION-PICKER-COLUMN-INTERNAL') {\n        return;\n      }\n      /**\n       * If we have actionOnClick\n       * then this means the user focused\n       * a picker column via mouse or\n       * touch (i.e. a PointerEvent). As a result,\n       * we should not enter/exit input mode\n       * until the click event has fired, which happens\n       * after the `focusin` event.\n       *\n       * Otherwise, the user likely focused\n       * the column using their keyboard and\n       * we should enter/exit input mode automatically.\n       */\n      if (!this.actionOnClick) {\n        const columnEl = target;\n        const allowInput = columnEl.numericInput;\n        if (allowInput) {\n          this.enterInputMode(columnEl, false);\n        }\n        else {\n          this.exitInputMode();\n        }\n      }\n    };\n    /**\n     * On click we need to run an actionOnClick\n     * function that has been set in onPointerDown\n     * so that we enter/exit input mode correctly.\n     */\n    this.onClick = () => {\n      const { actionOnClick } = this;\n      if (actionOnClick) {\n        actionOnClick();\n        this.actionOnClick = undefined;\n      }\n    };\n    /**\n     * Clicking a column also focuses the column on\n     * certain browsers, so we use onPointerDown\n     * to tell the onFocusIn function that users\n     * are trying to click the column rather than\n     * focus the column using the keyboard. When the\n     * user completes the click, the onClick function\n     * runs and runs the actionOnClick callback.\n     */\n    this.onPointerDown = (ev) => {\n      const { useInputMode, inputModeColumn, el } = this;\n      if (this.isInHighlightBounds(ev)) {\n        /**\n         * If we were already in\n         * input mode, then we should determine\n         * if we tapped a particular column and\n         * should switch to input mode for\n         * that specific column.\n         */\n        if (useInputMode) {\n          /**\n           * If we tapped a picker column\n           * then we should either switch to input\n           * mode for that column or all columns.\n           * Otherwise we should exit input mode\n           * since we just tapped the highlight and\n           * not a column.\n           */\n          if (ev.target.tagName === 'ION-PICKER-COLUMN-INTERNAL') {\n            /**\n             * If user taps 2 different columns\n             * then we should just switch to input mode\n             * for the new column rather than switching to\n             * input mode for all columns.\n             */\n            if (inputModeColumn && inputModeColumn === ev.target) {\n              this.actionOnClick = () => {\n                this.enterInputMode();\n              };\n            }\n            else {\n              this.actionOnClick = () => {\n                this.enterInputMode(ev.target);\n              };\n            }\n          }\n          else {\n            this.actionOnClick = () => {\n              this.exitInputMode();\n            };\n          }\n          /**\n           * If we were not already in\n           * input mode, then we should\n           * enter input mode for all columns.\n           */\n        }\n        else {\n          /**\n           * If there is only 1 numeric input column\n           * then we should skip multi column input.\n           */\n          const columns = el.querySelectorAll('ion-picker-column-internal.picker-column-numeric-input');\n          const columnEl = columns.length === 1 ? ev.target : undefined;\n          this.actionOnClick = () => {\n            this.enterInputMode(columnEl);\n          };\n        }\n        return;\n      }\n      this.actionOnClick = () => {\n        this.exitInputMode();\n      };\n    };\n    /**\n     * Enters input mode to allow\n     * for text entry of numeric values.\n     * If on mobile, we focus a hidden input\n     * field so that the on screen keyboard\n     * is brought up. When tabbing using a\n     * keyboard, picker columns receive an outline\n     * to indicate they are focused. As a result,\n     * we should not focus the hidden input as it\n     * would cause the outline to go away, preventing\n     * users from having any visual indication of which\n     * column is focused.\n     */\n    this.enterInputMode = (columnEl, focusInput = true) => {\n      const { inputEl, el } = this;\n      if (!inputEl) {\n        return;\n      }\n      /**\n       * Only active input mode if there is at\n       * least one column that accepts numeric input.\n       */\n      const hasInputColumn = el.querySelector('ion-picker-column-internal.picker-column-numeric-input');\n      if (!hasInputColumn) {\n        return;\n      }\n      /**\n       * If columnEl is undefined then\n       * it is assumed that all numeric pickers\n       * are eligible for text entry.\n       * (i.e. hour and minute columns)\n       */\n      this.useInputMode = true;\n      this.inputModeColumn = columnEl;\n      /**\n       * Users with a keyboard and mouse can\n       * activate input mode where the input is\n       * focused as well as when it is not focused,\n       * so we need to make sure we clean up any\n       * old listeners.\n       */\n      if (focusInput) {\n        if (this.destroyKeypressListener) {\n          this.destroyKeypressListener();\n          this.destroyKeypressListener = undefined;\n        }\n        inputEl.focus();\n      }\n      else {\n        el.addEventListener('keypress', this.onKeyPress);\n        this.destroyKeypressListener = () => {\n          el.removeEventListener('keypress', this.onKeyPress);\n        };\n      }\n      this.emitInputModeChange();\n    };\n    this.exitInputMode = () => {\n      const { inputEl, useInputMode } = this;\n      if (!useInputMode || !inputEl) {\n        return;\n      }\n      this.useInputMode = false;\n      this.inputModeColumn = undefined;\n      inputEl.blur();\n      inputEl.value = '';\n      if (this.destroyKeypressListener) {\n        this.destroyKeypressListener();\n        this.destroyKeypressListener = undefined;\n      }\n      this.emitInputModeChange();\n    };\n    this.onKeyPress = (ev) => {\n      const { inputEl } = this;\n      if (!inputEl) {\n        return;\n      }\n      const parsedValue = parseInt(ev.key, 10);\n      /**\n       * Only numbers should be allowed\n       */\n      if (!Number.isNaN(parsedValue)) {\n        inputEl.value += ev.key;\n        this.onInputChange();\n      }\n    };\n    this.selectSingleColumn = () => {\n      const { inputEl, inputModeColumn, singleColumnSearchTimeout } = this;\n      if (!inputEl || !inputModeColumn) {\n        return;\n      }\n      const values = inputModeColumn.items;\n      /**\n       * If users pause for a bit, the search\n       * value should be reset similar to how a\n       * <select> behaves. So typing \"34\", waiting,\n       * then typing \"5\" should select \"05\".\n       */\n      if (singleColumnSearchTimeout) {\n        clearTimeout(singleColumnSearchTimeout);\n      }\n      this.singleColumnSearchTimeout = setTimeout(() => {\n        inputEl.value = '';\n        this.singleColumnSearchTimeout = undefined;\n      }, 1000);\n      /**\n       * For values that are longer than 2 digits long\n       * we should shift the value over 1 character\n       * to the left. So typing \"456\" would result in \"56\".\n       * TODO: If we want to support more than just\n       * time entry, we should update this value to be\n       * the max length of all of the picker items.\n       */\n      if (inputEl.value.length >= 3) {\n        const startIndex = inputEl.value.length - 2;\n        const newString = inputEl.value.substring(startIndex);\n        inputEl.value = newString;\n        this.selectSingleColumn();\n        return;\n      }\n      /**\n       * Checking the value of the input gets priority\n       * first. For example, if the value of the input\n       * is \"1\" and we entered \"2\", then the complete value\n       * is \"12\" and we should select hour 12.\n       *\n       * Regex removes any leading zeros from values like \"02\".\n       */\n      const findItemFromCompleteValue = values.find(({ text }) => text.replace(/^0+/, '') === inputEl.value);\n      if (findItemFromCompleteValue) {\n        inputModeColumn.value = findItemFromCompleteValue.value;\n        return;\n      }\n      /**\n       * If we typed \"56\" to get minute 56, then typed \"7\",\n       * we should select \"07\" as \"567\" is not a valid minute.\n       */\n      if (inputEl.value.length === 2) {\n        const changedCharacter = inputEl.value.substring(inputEl.value.length - 1);\n        inputEl.value = changedCharacter;\n        this.selectSingleColumn();\n      }\n    };\n    /**\n     * Searches a list of column items for a particular\n     * value. This is currently used for numeric values.\n     * The zeroBehavior can be set to account for leading\n     * or trailing zeros when looking at the item text.\n     */\n    this.searchColumn = (colEl, value, zeroBehavior = 'start') => {\n      const behavior = zeroBehavior === 'start' ? /^0+/ : /0$/;\n      const item = colEl.items.find(({ text }) => text.replace(behavior, '') === value);\n      if (item) {\n        colEl.value = item.value;\n      }\n    };\n    this.selectMultiColumn = () => {\n      const { inputEl, el } = this;\n      if (!inputEl) {\n        return;\n      }\n      const numericPickers = Array.from(el.querySelectorAll('ion-picker-column-internal')).filter((col) => col.numericInput);\n      const firstColumn = numericPickers[0];\n      const lastColumn = numericPickers[1];\n      let value = inputEl.value;\n      let minuteValue;\n      switch (value.length) {\n        case 1:\n          this.searchColumn(firstColumn, value);\n          break;\n        case 2:\n          /**\n           * If the first character is `0` or `1` it is\n           * possible that users are trying to type `09`\n           * or `11` into the hour field, so we should look\n           * at that first.\n           */\n          const firstCharacter = inputEl.value.substring(0, 1);\n          value = firstCharacter === '0' || firstCharacter === '1' ? inputEl.value : firstCharacter;\n          this.searchColumn(firstColumn, value);\n          /**\n           * If only checked the first value,\n           * we can check the second value\n           * for a match in the minutes column\n           */\n          if (value.length === 1) {\n            minuteValue = inputEl.value.substring(inputEl.value.length - 1);\n            this.searchColumn(lastColumn, minuteValue, 'end');\n          }\n          break;\n        case 3:\n          /**\n           * If the first character is `0` or `1` it is\n           * possible that users are trying to type `09`\n           * or `11` into the hour field, so we should look\n           * at that first.\n           */\n          const firstCharacterAgain = inputEl.value.substring(0, 1);\n          value =\n            firstCharacterAgain === '0' || firstCharacterAgain === '1'\n              ? inputEl.value.substring(0, 2)\n              : firstCharacterAgain;\n          this.searchColumn(firstColumn, value);\n          /**\n           * If only checked the first value,\n           * we can check the second value\n           * for a match in the minutes column\n           */\n          minuteValue = value.length === 1 ? inputEl.value.substring(1) : inputEl.value.substring(2);\n          this.searchColumn(lastColumn, minuteValue, 'end');\n          break;\n        case 4:\n          /**\n           * If the first character is `0` or `1` it is\n           * possible that users are trying to type `09`\n           * or `11` into the hour field, so we should look\n           * at that first.\n           */\n          const firstCharacterAgainAgain = inputEl.value.substring(0, 1);\n          value =\n            firstCharacterAgainAgain === '0' || firstCharacterAgainAgain === '1'\n              ? inputEl.value.substring(0, 2)\n              : firstCharacterAgainAgain;\n          this.searchColumn(firstColumn, value);\n          /**\n           * If only checked the first value,\n           * we can check the second value\n           * for a match in the minutes column\n           */\n          const minuteValueAgain = value.length === 1\n            ? inputEl.value.substring(1, inputEl.value.length)\n            : inputEl.value.substring(2, inputEl.value.length);\n          this.searchColumn(lastColumn, minuteValueAgain, 'end');\n          break;\n        default:\n          const startIndex = inputEl.value.length - 4;\n          const newString = inputEl.value.substring(startIndex);\n          inputEl.value = newString;\n          this.selectMultiColumn();\n          break;\n      }\n    };\n    /**\n     * Searches the value of the active column\n     * to determine which value users are trying\n     * to select\n     */\n    this.onInputChange = () => {\n      const { useInputMode, inputEl, inputModeColumn } = this;\n      if (!useInputMode || !inputEl) {\n        return;\n      }\n      if (inputModeColumn) {\n        this.selectSingleColumn();\n      }\n      else {\n        this.selectMultiColumn();\n      }\n    };\n    /**\n     * Emit ionInputModeChange. Picker columns\n     * listen for this event to determine whether\n     * or not their column is \"active\" for text input.\n     */\n    this.emitInputModeChange = () => {\n      const { useInputMode, inputModeColumn } = this;\n      this.ionInputModeChange.emit({\n        useInputMode,\n        inputModeColumn,\n      });\n    };\n  }\n  componentWillLoad() {\n    getElementRoot(this.el).addEventListener('focusin', this.onFocusIn);\n    getElementRoot(this.el).addEventListener('focusout', this.onFocusOut);\n  }\n  render() {\n    return (h(Host, { onPointerDown: (ev) => this.onPointerDown(ev), onClick: () => this.onClick() }, h(\"input\", { \"aria-hidden\": \"true\", tabindex: -1, inputmode: \"numeric\", type: \"number\", ref: (el) => (this.inputEl = el), onInput: () => this.onInputChange(), onBlur: () => this.exitInputMode() }), h(\"div\", { class: \"picker-before\" }), h(\"div\", { class: \"picker-after\" }), h(\"div\", { class: \"picker-highlight\", ref: (el) => (this.highlightEl = el) }), h(\"slot\", null)));\n  }\n  get el() { return this; }\n  static get style() { return {\n    ios: pickerInternalIosCss,\n    md: pickerInternalMdCss\n  }; }\n}, [33, \"ion-picker-internal\"]);\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-picker-internal\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-picker-internal\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, PickerInternal);\n      }\n      break;\n  } });\n}\n\nexport { PickerInternal as P, defineCustomElement as d };\n"]},"metadata":{},"sourceType":"module"}