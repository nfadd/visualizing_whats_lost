{"ast":null,"code":"import { useState } from 'react';\nimport { startCamera } from './Camera';\nconst [latitude, setLatitude] = useState(0);\nconst [longitude, setLongitude] = useState(0);\nconst [userLatitude, setUserLatitude] = useState(0);\nconst [userLongitude, setUserLongitude] = useState(0);\n\nfunction setPinLatLong(lat, long) {\n  setLatitude(lat);\n  setLongitude(long);\n}\n/*\nfunction getPinLatLong() {\n    return [latitude, longitude]\n}\n*/\n\n\nfunction setUserLatLong(lat, long) {\n  setUserLatitude(lat);\n  setUserLongitude(long);\n}\n/*\nfunction getUserLatLong() {\n    return [userLatitude, userLongitude]\n}\n*/\n\n\nfunction locationChecker() {\n  /*\n  const pinCoords = getPinLatLong();\n  const pinLat = pinCoords[0];\n  const pinLong = pinCoords[1];\n   const userCoords = getUserLatLong();\n  const userLat = userCoords[0];\n  const userLong = userCoords[1];\n  */\n  console.log(`pin lat: ${latitude}, pin long: ${longitude}`);\n  console.log(`user lat: ${userLatitude}, user long: ${userLongitude}`);\n\n  if (calculateDistance(userLatitude, userLongitude, latitude, longitude) > 100) {\n    alert(\"You must be closer to location to take a picture.\");\n  } else {\n    startCamera();\n  }\n}\n\nfunction calculateDistance(lat1, long1, lat2, long2) {\n  var R = 6371000; // Radius of the earth in meters\n\n  var dLat = deg2rad(lat2 - lat1);\n  var dLong = deg2rad(long2 - long1);\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLong / 2) * Math.sin(dLong / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c; // Distance in meters\n\n  console.log(`distance: ${d}`);\n  return d;\n}\n\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\nexport { setPinLatLong, setUserLatLong, locationChecker };","map":{"version":3,"names":["useState","startCamera","latitude","setLatitude","longitude","setLongitude","userLatitude","setUserLatitude","userLongitude","setUserLongitude","setPinLatLong","lat","long","setUserLatLong","locationChecker","console","log","calculateDistance","alert","lat1","long1","lat2","long2","R","dLat","deg2rad","dLong","a","Math","sin","cos","c","atan2","sqrt","d","deg","PI"],"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/src/Location.js"],"sourcesContent":["import { useState } from 'react';\nimport { startCamera } from './Camera';\n\n\nconst [latitude, setLatitude] = useState(0);\nconst [longitude, setLongitude] = useState(0);\nconst [userLatitude, setUserLatitude] = useState(0);\nconst [userLongitude, setUserLongitude] = useState(0);\n\nfunction setPinLatLong(lat, long) {\n    setLatitude(lat);\n    setLongitude(long);\n}\n\n/*\nfunction getPinLatLong() {\n    return [latitude, longitude]\n}\n*/\n\nfunction setUserLatLong(lat, long) {\n    setUserLatitude(lat);\n    setUserLongitude(long);\n}\n\n/*\nfunction getUserLatLong() {\n    return [userLatitude, userLongitude]\n}\n*/\n\nfunction locationChecker() {\n    /*\n    const pinCoords = getPinLatLong();\n    const pinLat = pinCoords[0];\n    const pinLong = pinCoords[1];\n\n    const userCoords = getUserLatLong();\n    const userLat = userCoords[0];\n    const userLong = userCoords[1];\n    */\n\n    console.log(`pin lat: ${latitude}, pin long: ${longitude}`)\n    console.log(`user lat: ${userLatitude}, user long: ${userLongitude}`)\n\n    if(calculateDistance(userLatitude, userLongitude, latitude, longitude) > 100) {\n        alert(\"You must be closer to location to take a picture.\");\n    } else {\n        startCamera();\n    }\n}\n\nfunction calculateDistance(lat1, long1, lat2, long2) {\n    var R = 6371000; // Radius of the earth in meters\n    var dLat = deg2rad(lat2-lat1);\n    var dLong = deg2rad(long2-long1); \n    var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLong/2) * Math.sin(dLong/2); \n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \n    var d = R * c; // Distance in meters\n\n    console.log(`distance: ${d}`);\n    return d;\n}\n\nfunction deg2rad(deg) {\n    return deg * (Math.PI/180)\n}\n\nexport { setPinLatLong, setUserLatLong, locationChecker };"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,UAA5B;AAGA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,CAAD,CAAxC;AACA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,CAAD,CAA1C;AACA,MAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,CAAD,CAAlD;;AAEA,SAASU,aAAT,CAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;EAC9BT,WAAW,CAACQ,GAAD,CAAX;EACAN,YAAY,CAACO,IAAD,CAAZ;AACH;AAED;AACA;AACA;AACA;AACA;;;AAEA,SAASC,cAAT,CAAwBF,GAAxB,EAA6BC,IAA7B,EAAmC;EAC/BL,eAAe,CAACI,GAAD,CAAf;EACAF,gBAAgB,CAACG,IAAD,CAAhB;AACH;AAED;AACA;AACA;AACA;AACA;;;AAEA,SAASE,eAAT,GAA2B;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EAGIC,OAAO,CAACC,GAAR,CAAa,YAAWd,QAAS,eAAcE,SAAU,EAAzD;EACAW,OAAO,CAACC,GAAR,CAAa,aAAYV,YAAa,gBAAeE,aAAc,EAAnE;;EAEA,IAAGS,iBAAiB,CAACX,YAAD,EAAeE,aAAf,EAA8BN,QAA9B,EAAwCE,SAAxC,CAAjB,GAAsE,GAAzE,EAA8E;IAC1Ec,KAAK,CAAC,mDAAD,CAAL;EACH,CAFD,MAEO;IACHjB,WAAW;EACd;AACJ;;AAED,SAASgB,iBAAT,CAA2BE,IAA3B,EAAiCC,KAAjC,EAAwCC,IAAxC,EAA8CC,KAA9C,EAAqD;EACjD,IAAIC,CAAC,GAAG,OAAR,CADiD,CAChC;;EACjB,IAAIC,IAAI,GAAGC,OAAO,CAACJ,IAAI,GAACF,IAAN,CAAlB;EACA,IAAIO,KAAK,GAAGD,OAAO,CAACH,KAAK,GAACF,KAAP,CAAnB;EACA,IAAIO,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAC,CAAd,IAAmBI,IAAI,CAACC,GAAL,CAASL,IAAI,GAAC,CAAd,CAAnB,GAAsCI,IAAI,CAACE,GAAL,CAASL,OAAO,CAACN,IAAD,CAAhB,IAA0BS,IAAI,CAACE,GAAL,CAASL,OAAO,CAACJ,IAAD,CAAhB,CAA1B,GAAoDO,IAAI,CAACC,GAAL,CAASH,KAAK,GAAC,CAAf,CAApD,GAAwEE,IAAI,CAACC,GAAL,CAASH,KAAK,GAAC,CAAf,CAAtH;EACA,IAAIK,CAAC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAEN,CAAZ,CAAzB,CAAZ;EACA,IAAIO,CAAC,GAAGX,CAAC,GAAGQ,CAAZ,CANiD,CAMlC;;EAEfhB,OAAO,CAACC,GAAR,CAAa,aAAYkB,CAAE,EAA3B;EACA,OAAOA,CAAP;AACH;;AAED,SAAST,OAAT,CAAiBU,GAAjB,EAAsB;EAClB,OAAOA,GAAG,IAAIP,IAAI,CAACQ,EAAL,GAAQ,GAAZ,CAAV;AACH;;AAED,SAAS1B,aAAT,EAAwBG,cAAxB,EAAwCC,eAAxC"},"metadata":{},"sourceType":"module"}