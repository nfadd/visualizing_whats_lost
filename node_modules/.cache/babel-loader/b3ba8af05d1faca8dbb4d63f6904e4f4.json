{"ast":null,"code":"function Camera() {\n  const controls = document.getElementById('controls');\n  const cameraOptions = document.getElementById('select');\n  const video = document.querySelector('video');\n  const canvas = document.querySelector('canvas');\n  const screenshotImage = document.getElementById('screenshot');\n  const buttons = [...controls.querySelectorAll('button')];\n  let streamStarted = false;\n  const [play, pause, screenshot] = buttons;\n  const constraints = {\n    video: {\n      width: {\n        min: 1280,\n        ideal: 1920,\n        max: 2560\n      },\n      height: {\n        min: 720,\n        ideal: 1080,\n        max: 1440\n      }\n    }\n  };\n\n  cameraOptions.onchange = () => {\n    const updatedConstraints = { ...constraints,\n      deviceId: {\n        exact: cameraOptions.value\n      }\n    };\n    startStream(updatedConstraints);\n  };\n\n  play.onclick = () => {\n    if (streamStarted) {\n      video.play();\n      play.classList.add('d-none');\n      pause.classList.remove('d-none');\n      return;\n    }\n\n    if ('mediaDevices' in navigator && navigator.mediaDevices.getUserMedia) {\n      const updatedConstraints = { ...constraints,\n        deviceId: {\n          exact: cameraOptions.value\n        }\n      };\n      startStream(updatedConstraints);\n    }\n  };\n\n  const pauseStream = () => {\n    video.pause();\n    play.classList.remove('d-none');\n    pause.classList.add('d-none');\n  };\n\n  const doScreenshot = () => {\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    canvas.getContext('2d').drawImage(video, 0, 0);\n    screenshotImage.src = canvas.toDataURL('image/webp');\n    screenshotImage.classList.remove('d-none');\n  };\n\n  pause.onclick = pauseStream;\n  screenshot.onclick = doScreenshot;\n\n  const startStream = async constraints => {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    handleStream(stream);\n  };\n\n  const handleStream = stream => {\n    video.srcObject = stream;\n    play.classList.add('d-none');\n    pause.classList.remove('d-none');\n    screenshot.classList.remove('d-none');\n  };\n\n  const getCameraSelection = async () => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    const videoDevices = devices.filter(device => device.kind === 'videoinput');\n    const options = videoDevices.map(videoDevice => {\n      return `<option value=\"${videoDevice.deviceId}\">${videoDevice.label}</option>`;\n    });\n    cameraOptions.innerHTML = options.join('');\n  };\n\n  getCameraSelection();\n}\n\n_c = Camera;\nexport default Camera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/src/Camera.js"],"names":["Camera","controls","document","getElementById","cameraOptions","video","querySelector","canvas","screenshotImage","buttons","querySelectorAll","streamStarted","play","pause","screenshot","constraints","width","min","ideal","max","height","onchange","updatedConstraints","deviceId","exact","value","startStream","onclick","classList","add","remove","navigator","mediaDevices","getUserMedia","pauseStream","doScreenshot","videoWidth","videoHeight","getContext","drawImage","src","toDataURL","stream","handleStream","srcObject","getCameraSelection","devices","enumerateDevices","videoDevices","filter","device","kind","options","map","videoDevice","label","innerHTML","join"],"mappings":"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","sourcesContent":["function Camera(){\n    const controls = document.getElementById('controls');\n    const cameraOptions = document.getElementById('select');\n    const video = document.querySelector('video');\n    const canvas = document.querySelector('canvas');\n    const screenshotImage = document.getElementById('screenshot');\n    const buttons = [...controls.querySelectorAll('button')];\n    let streamStarted = false;\n\n    const [play, pause, screenshot] = buttons;\n\n    const constraints = {\n    video: {\n        width: {\n        min: 1280,\n        ideal: 1920,\n        max: 2560,\n        },\n        height: {\n        min: 720,\n        ideal: 1080,\n        max: 1440\n        },\n    }\n    };\n\n    cameraOptions.onchange = () => {\n    const updatedConstraints = {\n        ...constraints,\n        deviceId: {\n        exact: cameraOptions.value\n        }\n    };\n\n    startStream(updatedConstraints);\n    };\n\n    play.onclick = () => {\n    if (streamStarted) {\n        video.play();\n        play.classList.add('d-none');\n        pause.classList.remove('d-none');\n        return;\n    }\n    if ('mediaDevices' in navigator && navigator.mediaDevices.getUserMedia) {\n        const updatedConstraints = {\n        ...constraints,\n        deviceId: {\n            exact: cameraOptions.value\n        }\n        };\n        startStream(updatedConstraints);\n    }\n    };\n\n    const pauseStream = () => {\n    video.pause();\n    play.classList.remove('d-none');\n    pause.classList.add('d-none');\n    };\n\n    const doScreenshot = () => {\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    canvas.getContext('2d').drawImage(video, 0, 0);\n    screenshotImage.src = canvas.toDataURL('image/webp');\n    screenshotImage.classList.remove('d-none');\n    };\n\n    pause.onclick = pauseStream;\n    screenshot.onclick = doScreenshot;\n\n    const startStream = async (constraints) => {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    handleStream(stream);\n    };\n\n    const handleStream = (stream) => {\n    video.srcObject = stream;\n    play.classList.add('d-none');\n    pause.classList.remove('d-none');\n    screenshot.classList.remove('d-none');\n\n    };\n\n    const getCameraSelection = async () => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    const videoDevices = devices.filter(device => device.kind === 'videoinput');\n    const options = videoDevices.map(videoDevice => {\n        return `<option value=\"${videoDevice.deviceId}\">${videoDevice.label}</option>`;\n    });\n    cameraOptions.innerHTML = options.join('');\n    };\n\n    getCameraSelection();\n}\n\nexport default Camera;"]},"metadata":{},"sourceType":"module"}