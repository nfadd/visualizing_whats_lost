{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _assertThisInitialized from \"/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _regeneratorRuntime from \"/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Build } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config } from './ionic-global.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { n as assert, s as shallowEqualStringMap } from './helpers.js';\nimport { l as lifecycle, t as _transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index4.js';\nimport { a as attachComponent } from './framework-delegate.js';\nvar VIEW_STATE_NEW = 1;\nvar VIEW_STATE_ATTACHED = 2;\nvar VIEW_STATE_DESTROYED = 3;\n\nvar ViewController = /*#__PURE__*/function () {\n  function ViewController(component, params) {\n    _classCallCheck(this, ViewController);\n\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n\n  _createClass(ViewController, [{\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(container) {\n        var component;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.state = VIEW_STATE_ATTACHED;\n\n                if (this.element) {\n                  _context.next = 6;\n                  break;\n                }\n\n                component = this.component;\n                _context.next = 5;\n                return attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n\n              case 5:\n                this.element = _context.sent;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n    /**\n     * DOM WRITE\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n      var element = this.element;\n\n      if (element) {\n        if (this.delegate) {\n          this.delegate.removeViewFromDom(element.parentElement, element);\n        } else {\n          element.remove();\n        }\n      }\n\n      this.nav = undefined;\n      this.state = VIEW_STATE_DESTROYED;\n    }\n  }]);\n\n  return ViewController;\n}();\n\nvar matches = function matches(view, id, params) {\n  if (!view) {\n    return false;\n  }\n\n  if (view.component !== id) {\n    return false;\n  }\n\n  return shallowEqualStringMap(view.params, params);\n};\n\nvar convertToView = function convertToView(page, params) {\n  if (!page) {\n    return null;\n  }\n\n  if (page instanceof ViewController) {\n    return page;\n  }\n\n  return new ViewController(page, params);\n};\n\nvar convertToViews = function convertToViews(pages) {\n  return pages.map(function (page) {\n    if (page instanceof ViewController) {\n      return page;\n    }\n\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n\n    return convertToView(page, undefined);\n  }).filter(function (v) {\n    return v !== null;\n  });\n};\n\nvar navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\nvar Nav = /*@__PURE__*/proxyCustomElement( /*#__PURE__*/function (_HTMLElement) {\n  _inherits(_class, _HTMLElement);\n\n  var _super = _createSuper(_class);\n\n  function _class() {\n    var _this;\n\n    _classCallCheck(this, _class);\n\n    _this = _super.call(this);\n\n    _this.__registerHost();\n\n    _this.__attachShadow();\n\n    _this.ionNavWillLoad = createEvent(_assertThisInitialized(_this), \"ionNavWillLoad\", 7);\n    _this.ionNavWillChange = createEvent(_assertThisInitialized(_this), \"ionNavWillChange\", 3);\n    _this.ionNavDidChange = createEvent(_assertThisInitialized(_this), \"ionNavDidChange\", 3);\n    _this.transInstr = [];\n    _this.animationEnabled = true;\n    _this.useRouter = false;\n    _this.isTransitioning = false;\n    _this.destroyed = false;\n    _this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n\n    _this.animated = true;\n    return _this;\n  }\n\n  _createClass(_class, [{\n    key: \"swipeGestureChanged\",\n    value: function swipeGestureChanged() {\n      if (this.gesture) {\n        this.gesture.enable(this.swipeGesture === true);\n      }\n    }\n  }, {\n    key: \"rootChanged\",\n    value: function rootChanged() {\n      var isDev = Build.isDev;\n\n      if (this.root !== undefined) {\n        if (!this.useRouter) {\n          this.setRoot(this.root, this.rootParams);\n        } else if (isDev) {\n          console.warn('<ion-nav> does not support a root attribute when using ion-router.');\n        }\n      }\n    }\n  }, {\n    key: \"componentWillLoad\",\n    value: function componentWillLoad() {\n      this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n\n      if (this.swipeGesture === undefined) {\n        var mode = getIonMode(this);\n        this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n      }\n\n      this.ionNavWillLoad.emit();\n    }\n  }, {\n    key: \"componentDidLoad\",\n    value: function () {\n      var _componentDidLoad = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.rootChanged();\n                _context2.next = 3;\n                return import('./swipe-back.js');\n\n              case 3:\n                this.gesture = _context2.sent.createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n                this.swipeGestureChanged();\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function componentDidLoad() {\n        return _componentDidLoad.apply(this, arguments);\n      }\n\n      return componentDidLoad;\n    }()\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var _iterator = _createForOfIteratorHelper(this.views),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var view = _step.value;\n          lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n\n          view._destroy();\n        } // Release swipe back gesture and transition.\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (this.gesture) {\n        this.gesture.destroy();\n        this.gesture = undefined;\n      }\n\n      this.transInstr.length = 0;\n      this.views.length = 0;\n      this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(component, componentProps, opts, done) {\n      return this.insert(-1, component, componentProps, opts, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(insertIndex, component, componentProps, opts, done) {\n      return this.insertPages(insertIndex, [{\n        component: component,\n        componentProps: componentProps\n      }], opts, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"insertPages\",\n    value: function insertPages(insertIndex, insertComponents, opts, done) {\n      return this.queueTrns({\n        insertStart: insertIndex,\n        insertViews: insertComponents,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop(opts, done) {\n      return this.removeIndex(-1, 1, opts, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"popTo\",\n    value: function popTo(indexOrViewCtrl, opts, done) {\n      var ti = {\n        removeStart: -1,\n        removeCount: -1,\n        opts: opts\n      };\n\n      if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n        ti.removeView = indexOrViewCtrl;\n        ti.removeStart = 1;\n      } else if (typeof indexOrViewCtrl === 'number') {\n        ti.removeStart = indexOrViewCtrl + 1;\n      }\n\n      return this.queueTrns(ti, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"popToRoot\",\n    value: function popToRoot(opts, done) {\n      return this.removeIndex(1, -1, opts, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"removeIndex\",\n    value: function removeIndex(startIndex) {\n      var removeCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var opts = arguments.length > 2 ? arguments[2] : undefined;\n      var done = arguments.length > 3 ? arguments[3] : undefined;\n      return this.queueTrns({\n        removeStart: startIndex,\n        removeCount: removeCount,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"setRoot\",\n    value: function setRoot(component, componentProps, opts, done) {\n      return this.setPages([{\n        component: component,\n        componentProps: componentProps\n      }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n\n  }, {\n    key: \"setPages\",\n    value: function setPages(views, opts, done) {\n      opts !== null && opts !== void 0 ? opts : opts = {}; // if animation wasn't set to true then default it to NOT animate\n\n      if (opts.animated !== true) {\n        opts.animated = false;\n      }\n\n      return this.queueTrns({\n        insertStart: 0,\n        insertViews: views,\n        removeStart: 0,\n        removeCount: -1,\n        opts: opts\n      }, done);\n    }\n    /**\n     * Called by the router to update the view.\n     *\n     * @param id The component tag.\n     * @param params The component params.\n     * @param direction A direction hint.\n     * @param animation an AnimationBuilder.\n     *\n     * @return the status.\n     * @internal\n     */\n\n  }, {\n    key: \"setRouteId\",\n    value: function setRouteId(id, params, direction, animation) {\n      var active = this.getActiveSync();\n\n      if (matches(active, id, params)) {\n        return Promise.resolve({\n          changed: false,\n          element: active.element\n        });\n      }\n\n      var resolve;\n      var promise = new Promise(function (r) {\n        return resolve = r;\n      });\n      var finish;\n      var commonOpts = {\n        updateURL: false,\n        viewIsReady: function viewIsReady(enteringEl) {\n          var mark;\n          var p = new Promise(function (r) {\n            return mark = r;\n          });\n          resolve({\n            changed: true,\n            element: enteringEl,\n            markVisible: function () {\n              var _markVisible = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        mark();\n                        _context3.next = 3;\n                        return finish;\n\n                      case 3:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n\n              function markVisible() {\n                return _markVisible.apply(this, arguments);\n              }\n\n              return markVisible;\n            }()\n          });\n          return p;\n        }\n      };\n\n      if (direction === 'root') {\n        finish = this.setRoot(id, params, commonOpts);\n      } else {\n        // Look for a view matching the target in the view stack.\n        var viewController = this.views.find(function (v) {\n          return matches(v, id, params);\n        });\n\n        if (viewController) {\n          finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animationBuilder: animation\n          }));\n        } else if (direction === 'forward') {\n          finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n            animationBuilder: animation\n          }));\n        } else if (direction === 'back') {\n          finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n            direction: 'back',\n            animated: true,\n            animationBuilder: animation\n          }));\n        }\n      }\n\n      return promise;\n    }\n    /**\n     * Called by <ion-router> to retrieve the current component.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"getRouteId\",\n    value: function () {\n      var _getRouteId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var active;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                active = this.getActiveSync();\n\n                if (!active) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  id: active.element.tagName,\n                  params: active.params,\n                  element: active.element\n                });\n\n              case 3:\n                return _context4.abrupt(\"return\", undefined);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getRouteId() {\n        return _getRouteId.apply(this, arguments);\n      }\n\n      return getRouteId;\n    }()\n    /**\n     * Get the active view.\n     */\n\n  }, {\n    key: \"getActive\",\n    value: function () {\n      var _getActive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.getActiveSync());\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getActive() {\n        return _getActive.apply(this, arguments);\n      }\n\n      return getActive;\n    }()\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n\n  }, {\n    key: \"getByIndex\",\n    value: function () {\n      var _getByIndex = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(index) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.views[index]);\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getByIndex(_x2) {\n        return _getByIndex.apply(this, arguments);\n      }\n\n      return getByIndex;\n    }()\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n\n  }, {\n    key: \"canGoBack\",\n    value: function () {\n      var _canGoBack = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(view) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.canGoBackSync(view));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function canGoBack(_x3) {\n        return _canGoBack.apply(this, arguments);\n      }\n\n      return canGoBack;\n    }()\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n\n  }, {\n    key: \"getPrevious\",\n    value: function () {\n      var _getPrevious = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(view) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this.getPreviousSync(view));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getPrevious(_x4) {\n        return _getPrevious.apply(this, arguments);\n      }\n\n      return getPrevious;\n    }()\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.views.length;\n    }\n  }, {\n    key: \"getActiveSync\",\n    value: function getActiveSync() {\n      return this.views[this.views.length - 1];\n    }\n  }, {\n    key: \"canGoBackSync\",\n    value: function canGoBackSync() {\n      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n      return !!(view && this.getPreviousSync(view));\n    }\n  }, {\n    key: \"getPreviousSync\",\n    value: function getPreviousSync() {\n      var view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n\n      if (!view) {\n        return undefined;\n      }\n\n      var views = this.views;\n      var index = views.indexOf(view);\n      return index > 0 ? views[index - 1] : undefined;\n    }\n    /**\n     * Adds a navigation stack change to the queue and schedules it to run.\n     *\n     * @returns Whether the transition succeeds.\n     */\n\n  }, {\n    key: \"queueTrns\",\n    value: function () {\n      var _queueTrns = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(ti, done) {\n        var _a, _b, promise, router, canTransition;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy))) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", false);\n\n              case 2:\n                promise = new Promise(function (resolve, reject) {\n                  ti.resolve = resolve;\n                  ti.reject = reject;\n                });\n                ti.done = done;\n                /**\n                 * If using router, check to see if navigation hooks\n                 * will allow us to perform this transition. This\n                 * is required in order for hooks to work with\n                 * the ion-back-button or swipe to go back.\n                 */\n\n                if (!(ti.opts && ti.opts.updateURL !== false && this.useRouter)) {\n                  _context9.next = 15;\n                  break;\n                }\n\n                router = document.querySelector('ion-router');\n\n                if (!router) {\n                  _context9.next = 15;\n                  break;\n                }\n\n                _context9.next = 9;\n                return router.canTransition();\n\n              case 9:\n                canTransition = _context9.sent;\n\n                if (!(canTransition === false)) {\n                  _context9.next = 12;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", false);\n\n              case 12:\n                if (!(typeof canTransition === 'string')) {\n                  _context9.next = 15;\n                  break;\n                }\n\n                router.push(canTransition, ti.opts.direction || 'back');\n                return _context9.abrupt(\"return\", false);\n\n              case 15:\n                // Normalize empty\n                if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n                  ti.insertViews = undefined;\n                } // Enqueue transition instruction\n\n\n                this.transInstr.push(ti); // if there isn't a transition already happening\n                // then this will kick off this transition\n\n                this.nextTrns();\n                return _context9.abrupt(\"return\", promise);\n\n              case 19:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function queueTrns(_x5, _x6) {\n        return _queueTrns.apply(this, arguments);\n      }\n\n      return queueTrns;\n    }()\n  }, {\n    key: \"success\",\n    value: function success(result, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n\n      if (ti.done) {\n        ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n      }\n\n      ti.resolve(result.hasCompleted);\n\n      if (ti.opts.updateURL !== false && this.useRouter) {\n        var router = document.querySelector('ion-router');\n\n        if (router) {\n          var direction = result.direction === 'back' ? 'back' : 'forward';\n          router.navChanged(direction);\n        }\n      }\n    }\n  }, {\n    key: \"failed\",\n    value: function failed(rejectReason, ti) {\n      if (this.destroyed) {\n        this.fireError('nav controller was destroyed', ti);\n        return;\n      }\n\n      this.transInstr.length = 0;\n      this.fireError(rejectReason, ti);\n    }\n  }, {\n    key: \"fireError\",\n    value: function fireError(rejectReason, ti) {\n      if (ti.done) {\n        ti.done(false, false, rejectReason);\n      }\n\n      if (ti.reject && !this.destroyed) {\n        ti.reject(rejectReason);\n      } else {\n        ti.resolve(false);\n      }\n    }\n    /**\n     * Consumes the next transition in the queue.\n     *\n     * @returns whether the transition is executed.\n     */\n\n  }, {\n    key: \"nextTrns\",\n    value: function nextTrns() {\n      // this is the framework's bread 'n butta function\n      // only one transition is allowed at any given time\n      if (this.isTransitioning) {\n        return false;\n      } // there is no transition happening right now, executes the next instructions.\n\n\n      var ti = this.transInstr.shift();\n\n      if (!ti) {\n        return false;\n      }\n\n      this.runTransition(ti);\n      return true;\n    }\n    /** Executes all the transition instruction from the queue. */\n\n  }, {\n    key: \"runTransition\",\n    value: function () {\n      var _runTransition = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(ti) {\n        var leavingView, enteringView, requiresTransition, isBackDirection, result;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                // set that this nav is actively transitioning\n                this.ionNavWillChange.emit();\n                this.isTransitioning = true;\n                this.prepareTI(ti);\n                leavingView = this.getActiveSync();\n                enteringView = this.getEnteringView(ti, leavingView);\n\n                if (!(!leavingView && !enteringView)) {\n                  _context10.next = 8;\n                  break;\n                }\n\n                throw new Error('no views in the stack to be removed');\n\n              case 8:\n                if (!(enteringView && enteringView.state === VIEW_STATE_NEW)) {\n                  _context10.next = 11;\n                  break;\n                }\n\n                _context10.next = 11;\n                return enteringView.init(this.el);\n\n              case 11:\n                this.postViewInit(enteringView, leavingView, ti); // Needs transition?\n\n                requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n\n                if (requiresTransition && ti.opts && leavingView) {\n                  isBackDirection = ti.opts.direction === 'back';\n                  /**\n                   * If heading back, use the entering page's animation\n                   * unless otherwise specified by the developer.\n                   */\n\n                  if (isBackDirection) {\n                    ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n                  }\n\n                  leavingView.animationBuilder = ti.opts.animationBuilder;\n                }\n\n                if (!requiresTransition) {\n                  _context10.next = 20;\n                  break;\n                }\n\n                _context10.next = 17;\n                return this.transition(enteringView, leavingView, ti);\n\n              case 17:\n                result = _context10.sent;\n                _context10.next = 21;\n                break;\n\n              case 20:\n                // transition is not required, so we are already done!\n                // they're inserting/removing the views somewhere in the middle or\n                // beginning, so visually nothing needs to animate/transition\n                // resolve immediately because there's no animation that's happening\n                result = {\n                  hasCompleted: true,\n                  requiresTransition: false\n                };\n\n              case 21:\n                this.success(result, ti);\n                this.ionNavDidChange.emit();\n                _context10.next = 28;\n                break;\n\n              case 25:\n                _context10.prev = 25;\n                _context10.t0 = _context10[\"catch\"](0);\n                this.failed(_context10.t0, ti);\n\n              case 28:\n                this.isTransitioning = false;\n                this.nextTrns();\n\n              case 30:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 25]]);\n      }));\n\n      function runTransition(_x7) {\n        return _runTransition.apply(this, arguments);\n      }\n\n      return runTransition;\n    }()\n  }, {\n    key: \"prepareTI\",\n    value: function prepareTI(ti) {\n      var _a, _b;\n\n      var _c;\n\n      var viewsLength = this.views.length;\n      (_a = ti.opts) !== null && _a !== void 0 ? _a : ti.opts = {};\n      (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : _c.delegate = this.delegate;\n\n      if (ti.removeView !== undefined) {\n        assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n        assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n        var index = this.views.indexOf(ti.removeView);\n\n        if (index < 0) {\n          throw new Error('removeView was not found');\n        }\n\n        ti.removeStart += index;\n      }\n\n      if (ti.removeStart !== undefined) {\n        if (ti.removeStart < 0) {\n          ti.removeStart = viewsLength - 1;\n        }\n\n        if (ti.removeCount < 0) {\n          ti.removeCount = viewsLength - ti.removeStart;\n        }\n\n        ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n      }\n\n      if (ti.insertViews) {\n        // allow -1 to be passed in to auto push it on the end\n        // and clean up the index if it's larger then the size of the stack\n        if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n          ti.insertStart = viewsLength;\n        }\n\n        ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n      }\n\n      var insertViews = ti.insertViews;\n\n      if (!insertViews) {\n        return;\n      }\n\n      assert(insertViews.length > 0, 'length can not be zero');\n      var viewControllers = convertToViews(insertViews);\n\n      if (viewControllers.length === 0) {\n        throw new Error('invalid views to insert');\n      } // Check all the inserted view are correct\n\n\n      var _iterator2 = _createForOfIteratorHelper(viewControllers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var view = _step2.value;\n          view.delegate = ti.opts.delegate;\n          var nav = view.nav;\n\n          if (nav && nav !== this) {\n            throw new Error('inserted view was already inserted');\n          }\n\n          if (view.state === VIEW_STATE_DESTROYED) {\n            throw new Error('inserted view was already destroyed');\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      ti.insertViews = viewControllers;\n    }\n    /**\n     * Returns the view that will be entered considering the transition instructions.\n     *\n     * @param ti The instructions.\n     * @param leavingView The view being left or undefined if none.\n     *\n     * @returns The view that will be entered, undefined if none.\n     */\n\n  }, {\n    key: \"getEnteringView\",\n    value: function getEnteringView(ti, leavingView) {\n      // The last inserted view will be entered when view are inserted.\n      var insertViews = ti.insertViews;\n\n      if (insertViews !== undefined) {\n        return insertViews[insertViews.length - 1];\n      } // When views are deleted, we will enter the last view that is not removed and not the view being left.\n\n\n      var removeStart = ti.removeStart;\n\n      if (removeStart !== undefined) {\n        var views = this.views;\n        var removeEnd = removeStart + ti.removeCount;\n\n        for (var i = views.length - 1; i >= 0; i--) {\n          var view = views[i];\n\n          if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n            return view;\n          }\n        }\n      }\n\n      return undefined;\n    }\n    /**\n     * Adds and Removes the views from the navigation stack.\n     *\n     * @param enteringView The view being entered.\n     * @param leavingView The view being left.\n     * @param ti The instructions.\n     */\n\n  }, {\n    key: \"postViewInit\",\n    value: function postViewInit(enteringView, leavingView, ti) {\n      var _a, _b, _c;\n\n      assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n      assert(ti.resolve, 'resolve must be valid');\n      assert(ti.reject, 'reject must be valid'); // Compute the views to remove.\n\n      var opts = ti.opts;\n      var insertViews = ti.insertViews,\n          removeStart = ti.removeStart,\n          removeCount = ti.removeCount;\n      /** Records the view to destroy */\n\n      var destroyQueue; // there are views to remove\n\n      if (removeStart !== undefined && removeCount !== undefined) {\n        assert(removeStart >= 0, 'removeStart can not be negative');\n        assert(removeCount >= 0, 'removeCount can not be negative');\n        destroyQueue = [];\n\n        for (var i = removeStart; i < removeStart + removeCount; i++) {\n          var view = this.views[i];\n\n          if (view && view !== enteringView && view !== leavingView) {\n            destroyQueue.push(view);\n          }\n        } // default the direction to \"back\"\n\n\n        (_a = opts.direction) !== null && _a !== void 0 ? _a : opts.direction = 'back';\n      }\n\n      var finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n      assert(finalNumViews >= 0, 'final balance can not be negative');\n\n      if (finalNumViews === 0) {\n        console.warn(\"You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.\", this, this.el);\n        throw new Error('navigation stack needs at least one root page');\n      } // At this point the transition can not be rejected, any throw should be an error\n      // Insert the new views in the stack.\n\n\n      if (insertViews) {\n        // add the views to the\n        var insertIndex = ti.insertStart;\n\n        var _iterator3 = _createForOfIteratorHelper(insertViews),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _view = _step3.value;\n            this.insertViewAt(_view, insertIndex);\n            insertIndex++;\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        if (ti.enteringRequiresTransition) {\n          // default to forward if not already set\n          (_c = opts.direction) !== null && _c !== void 0 ? _c : opts.direction = 'forward';\n        }\n      } // if the views to be removed are in the beginning or middle\n      // and there is not a view that needs to visually transition out\n      // then just destroy them and don't transition anything\n      // batch all of lifecycles together\n      // let's make sure, callbacks are zoned\n\n\n      if (destroyQueue && destroyQueue.length > 0) {\n        var _iterator4 = _createForOfIteratorHelper(destroyQueue),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var _view2 = _step4.value;\n            lifecycle(_view2.element, LIFECYCLE_WILL_LEAVE);\n            lifecycle(_view2.element, LIFECYCLE_DID_LEAVE);\n            lifecycle(_view2.element, LIFECYCLE_WILL_UNLOAD);\n          } // once all lifecycle events has been delivered, we can safely detroy the views\n\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        var _iterator5 = _createForOfIteratorHelper(destroyQueue),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var _view3 = _step5.value;\n            this.destroyView(_view3);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"transition\",\n    value: function () {\n      var _transition2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(enteringView, leavingView, ti) {\n        var _this2 = this;\n\n        var opts, progressCallback, mode, enteringEl, leavingEl, animationOpts, _yield$_transition, hasCompleted;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                // we should animate (duration > 0) if the pushed page is not the first one (startup)\n                // or if it is a portal (modal, actionsheet, etc.)\n                opts = ti.opts;\n                progressCallback = opts.progressAnimation ? function (ani) {\n                  return _this2.sbAni = ani;\n                } : undefined;\n                mode = getIonMode(this);\n                enteringEl = enteringView.element;\n                leavingEl = leavingView && leavingView.element;\n                animationOpts = Object.assign(Object.assign({\n                  mode: mode,\n                  showGoBack: this.canGoBackSync(enteringView),\n                  baseEl: this.el,\n                  progressCallback: progressCallback,\n                  animated: this.animated && config.getBoolean('animated', true),\n                  enteringEl: enteringEl,\n                  leavingEl: leavingEl\n                }, opts), {\n                  animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation')\n                });\n                _context11.next = 8;\n                return _transition(animationOpts);\n\n              case 8:\n                _yield$_transition = _context11.sent;\n                hasCompleted = _yield$_transition.hasCompleted;\n                return _context11.abrupt(\"return\", this.transitionFinish(hasCompleted, enteringView, leavingView, opts));\n\n              case 11:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function transition(_x8, _x9, _x10) {\n        return _transition2.apply(this, arguments);\n      }\n\n      return transition;\n    }()\n  }, {\n    key: \"transitionFinish\",\n    value: function transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n      var cleanupView = hasCompleted ? enteringView : leavingView;\n\n      if (cleanupView) {\n        this.cleanup(cleanupView);\n      }\n\n      return {\n        hasCompleted: hasCompleted,\n        requiresTransition: true,\n        enteringView: enteringView,\n        leavingView: leavingView,\n        direction: opts.direction\n      };\n    }\n    /**\n     * Inserts a view at the specified index.\n     *\n     * When the view already is in the stack it will be moved to the new position.\n     *\n     * @param view The view to insert.\n     * @param index The index where to insert the view.\n     */\n\n  }, {\n    key: \"insertViewAt\",\n    value: function insertViewAt(view, index) {\n      var views = this.views;\n      var existingIndex = views.indexOf(view);\n\n      if (existingIndex > -1) {\n        assert(view.nav === this, 'view is not part of the nav'); // The view already in the stack, removes it.\n\n        views.splice(existingIndex, 1); // and add it back at the requested index.\n\n        views.splice(index, 0, view);\n      } else {\n        assert(!view.nav, 'nav is used'); // this is a new view to add to the stack\n        // create the new entering view\n\n        view.nav = this;\n        views.splice(index, 0, view);\n      }\n    }\n    /**\n     * Removes a view from the stack.\n     *\n     * @param view The view to remove.\n     */\n\n  }, {\n    key: \"removeView\",\n    value: function removeView(view) {\n      assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n      var views = this.views;\n      var index = views.indexOf(view);\n      assert(index > -1, 'view must be part of the stack');\n\n      if (index >= 0) {\n        views.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"destroyView\",\n    value: function destroyView(view) {\n      view._destroy();\n\n      this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup(activeView) {\n      // ok, cleanup time!! Destroy all of the views that are\n      // INACTIVE and come after the active view\n      // only do this if the views exist, though\n      if (this.destroyed) {\n        return;\n      }\n\n      var views = this.views;\n      var activeViewIndex = views.indexOf(activeView);\n\n      for (var i = views.length - 1; i >= 0; i--) {\n        var view = views[i];\n        /**\n         * When inserting multiple views via insertPages\n         * the last page will be transitioned to, but the\n         * others will not be. As a result, a DOM element\n         * will only be created for the last page inserted.\n         * As a result, it is possible to have views in the\n         * stack that do not have `view.element` yet.\n         */\n\n        var element = view.element;\n\n        if (element) {\n          if (i > activeViewIndex) {\n            // this view comes after the active view\n            // let's unload it\n            lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n            this.destroyView(view);\n          } else if (i < activeViewIndex) {\n            // this view comes before the active view\n            // and it is not a portal then ensure it is hidden\n            setPageHidden(element, true);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart() {\n      this.pop({\n        direction: 'back',\n        progressAnimation: true\n      });\n    }\n  }, {\n    key: \"onMove\",\n    value: function onMove(stepValue) {\n      if (this.sbAni) {\n        this.sbAni.progressStep(stepValue);\n      }\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(shouldComplete, stepValue, dur) {\n      var _this3 = this;\n\n      if (this.sbAni) {\n        this.animationEnabled = false;\n        this.sbAni.onFinish(function () {\n          _this3.animationEnabled = true;\n        }, {\n          oneTimeCallback: true\n        }); // Account for rounding errors in JS\n\n        var newStepValue = shouldComplete ? -0.001 : 0.001;\n        /**\n         * Animation will be reversed here, so need to\n         * reverse the easing curve as well\n         *\n         * Additionally, we need to account for the time relative\n         * to the new easing curve, as `stepValue` is going to be given\n         * in terms of a linear curve.\n         */\n\n        if (!shouldComplete) {\n          this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n          newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n        } else {\n          newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n        }\n\n        this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return h(\"slot\", null);\n    }\n  }, {\n    key: \"el\",\n    get: function get() {\n      return this;\n    }\n  }], [{\n    key: \"watchers\",\n    get: function get() {\n      return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n      };\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return navCss;\n    }\n  }]);\n\n  return _class;\n}(HTMLElement), [1, \"ion-nav\", {\n  \"delegate\": [16],\n  \"swipeGesture\": [1028, \"swipe-gesture\"],\n  \"animated\": [4],\n  \"animation\": [16],\n  \"rootParams\": [16],\n  \"root\": [1],\n  \"push\": [64],\n  \"insert\": [64],\n  \"insertPages\": [64],\n  \"pop\": [64],\n  \"popTo\": [64],\n  \"popToRoot\": [64],\n  \"removeIndex\": [64],\n  \"setRoot\": [64],\n  \"setPages\": [64],\n  \"setRouteId\": [64],\n  \"getRouteId\": [64],\n  \"getActive\": [64],\n  \"getByIndex\": [64],\n  \"canGoBack\": [64],\n  \"getPrevious\": [64]\n}]);\n\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  var components = [\"ion-nav\"];\n  components.forEach(function (tagName) {\n    switch (tagName) {\n      case \"ion-nav\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Nav);\n        }\n\n        break;\n    }\n  });\n}\n\nvar IonNav = Nav;\nvar defineCustomElement = defineCustomElement$1;\nexport { IonNav, defineCustomElement };","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@ionic/core/components/ion-nav.js"],"names":["proxyCustomElement","HTMLElement","createEvent","h","Build","b","getIonMode","c","config","g","getTimeGivenProgression","n","assert","s","shallowEqualStringMap","l","lifecycle","t","transition","setPageHidden","d","LIFECYCLE_WILL_UNLOAD","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","component","params","state","container","element","delegate","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","convertToView","page","convertToViews","pages","map","componentProps","filter","v","navCss","Nav","__registerHost","__attachShadow","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","gesture","enable","swipeGesture","isDev","root","setRoot","rootParams","console","warn","document","querySelector","el","closest","mode","getBoolean","emit","rootChanged","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","swipeGestureChanged","_destroy","destroy","length","opts","done","insert","insertIndex","insertPages","insertComponents","queueTrns","insertStart","insertViews","removeIndex","indexOrViewCtrl","ti","removeStart","removeCount","removeView","startIndex","setPages","direction","animation","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","popTo","Object","assign","animationBuilder","push","tagName","index","canGoBackSync","getPreviousSync","indexOf","_a","skipIfBusy","reject","router","canTransition","_b","nextTrns","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","isBackDirection","success","failed","_c","viewsLength","viewControllers","removeEnd","i","destroyQueue","finalNumViews","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","pop","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","defineCustomElement$1","customElements","components","forEach","define","IonNav","defineCustomElement"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Build } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config } from './ionic-global.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { n as assert, s as shallowEqualStringMap } from './helpers.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index4.js';\nimport { a as attachComponent } from './framework-delegate.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages\n    .map((page) => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  })\n    .filter((v) => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    const isDev = Build.isDev;\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n      else if (isDev) {\n        console.warn('<ion-nav> does not support a root attribute when using ion-router.');\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    // Release swipe back gesture and transition.\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.transInstr.length = 0;\n    this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.insert(-1, component, componentProps, opts, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.insertPages(insertIndex, [{ component, componentProps }], opts, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts,\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.removeIndex(-1, 1, opts, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const ti = {\n      removeStart: -1,\n      removeCount: -1,\n      opts,\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      ti.removeView = indexOrViewCtrl;\n      ti.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      ti.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(ti, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.removeIndex(1, -1, opts, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts,\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    opts !== null && opts !== void 0 ? opts : (opts = {});\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts,\n    }, done);\n  }\n  /**\n   * Called by the router to update the view.\n   *\n   * @param id The component tag.\n   * @param params The component params.\n   * @param direction A direction hint.\n   * @param animation an AnimationBuilder.\n   *\n   * @return the status.\n   * @internal\n   */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element,\n      });\n    }\n    let resolve;\n    const promise = new Promise((r) => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: (enteringEl) => {\n        let mark;\n        const p = new Promise((r) => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          },\n        });\n        return p;\n      },\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      // Look for a view matching the target in the view stack.\n      const viewController = this.views.find((v) => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /**\n   * Called by <ion-router> to retrieve the current component.\n   *\n   * @internal\n   */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    if (active) {\n      return {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element,\n      };\n    }\n    return undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  async getActive() {\n    return this.getActiveSync();\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  async getByIndex(index) {\n    return this.views[index];\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  async canGoBack(view) {\n    return this.canGoBackSync(view);\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  async getPrevious(view) {\n    return this.getPreviousSync(view);\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  /**\n   * Adds a navigation stack change to the queue and schedules it to run.\n   *\n   * @returns Whether the transition succeeds.\n   */\n  async queueTrns(ti, done) {\n    var _a, _b;\n    if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n      return false;\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return false;\n        }\n        if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return false;\n        }\n      }\n    }\n    // Normalize empty\n    if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  /**\n   * Consumes the next transition in the queue.\n   *\n   * @returns whether the transition is executed.\n   */\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now, executes the next instructions.\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  /** Executes all the transition instruction from the queue. */\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      let result;\n      if (requiresTransition) {\n        result = await this.transition(enteringView, leavingView, ti);\n      }\n      else {\n        // transition is not required, so we are already done!\n        // they're inserting/removing the views somewhere in the middle or\n        // beginning, so visually nothing needs to animate/transition\n        // resolve immediately because there's no animation that's happening\n        result = {\n          hasCompleted: true,\n          requiresTransition: false,\n        };\n      }\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    var _a, _b;\n    var _c;\n    const viewsLength = this.views.length;\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : (ti.opts = {});\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : (_c.delegate = this.delegate);\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  /**\n   * Returns the view that will be entered considering the transition instructions.\n   *\n   * @param ti The instructions.\n   * @param leavingView The view being left or undefined if none.\n   *\n   * @returns The view that will be entered, undefined if none.\n   */\n  getEnteringView(ti, leavingView) {\n    // The last inserted view will be entered when view are inserted.\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      return insertViews[insertViews.length - 1];\n    }\n    // When views are deleted, we will enter the last view that is not removed and not the view being left.\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  /**\n   * Adds and Removes the views from the navigation stack.\n   *\n   * @param enteringView The view being entered.\n   * @param leavingView The view being left.\n   * @param ti The instructions.\n   */\n  postViewInit(enteringView, leavingView, ti) {\n    var _a, _b, _c;\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    // Compute the views to remove.\n    const opts = ti.opts;\n    const { insertViews, removeStart, removeCount } = ti;\n    /** Records the view to destroy */\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\n        const view = this.views[i];\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : (opts.direction = 'back');\n    }\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n    assert(finalNumViews >= 0, 'final balance can not be negative');\n    if (finalNumViews === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // Insert the new views in the stack.\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : (opts.direction = 'forward');\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation ? (ani) => (this.sbAni = ani) : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction,\n    };\n  }\n  /**\n   * Inserts a view at the specified index.\n   *\n   * When the view already is in the stack it will be moved to the new position.\n   *\n   * @param view The view to insert.\n   * @param index The index where to insert the view.\n   */\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      assert(view.nav === this, 'view is not part of the nav');\n      // The view already in the stack, removes it.\n      views.splice(existingIndex, 1);\n      // and add it back at the requested index.\n      views.splice(index, 0, view);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      views.splice(index, 0, view);\n    }\n  }\n  /**\n   * Removes a view from the stack.\n   *\n   * @param view The view to remove.\n   */\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.pop({ direction: 'back', progressAnimation: true });\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n  static get style() { return navCss; }\n}, [1, \"ion-nav\", {\n    \"delegate\": [16],\n    \"swipeGesture\": [1028, \"swipe-gesture\"],\n    \"animated\": [4],\n    \"animation\": [16],\n    \"rootParams\": [16],\n    \"root\": [1],\n    \"push\": [64],\n    \"insert\": [64],\n    \"insertPages\": [64],\n    \"pop\": [64],\n    \"popTo\": [64],\n    \"popToRoot\": [64],\n    \"removeIndex\": [64],\n    \"setRoot\": [64],\n    \"setPages\": [64],\n    \"setRouteId\": [64],\n    \"getRouteId\": [64],\n    \"getActive\": [64],\n    \"getByIndex\": [64],\n    \"canGoBack\": [64],\n    \"getPrevious\": [64]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-nav\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-nav\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Nav);\n      }\n      break;\n  } });\n}\n\nconst IonNav = Nav;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonNav, defineCustomElement };\n"]},"metadata":{},"sourceType":"module"}