{"ast":null,"code":"function Camera() {\n  const screenshot = document.getElementById('screenshotButton');\n  const cameraOptions = document.getElementById('select');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const screenshotImage = document.getElementById('display-style');\n  const screen = document.getElementById('display-cover');\n  const screenshotControls = document.getElementById('screenshotControls');\n  const [retake, use] = screenshotControls.querySelectorAll('button');\n  const constraints = {\n    video: {\n      width: {\n        min: 1280,\n        ideal: 1920,\n        max: 2560\n      },\n      height: {\n        min: 720,\n        ideal: 1080,\n        max: 1440\n      }\n    }\n  };\n\n  cameraOptions.onchange = () => {\n    const updatedConstraints = { ...constraints,\n      deviceId: {\n        exact: cameraOptions.value\n      }\n    };\n    startStream(updatedConstraints, video, screen);\n  };\n\n  if ('mediaDevices' in navigator && navigator.mediaDevices.getUserMedia) {\n    const updatedConstraints = { ...constraints,\n      deviceId: {\n        exact: cameraOptions.value\n      }\n    };\n    startStream(updatedConstraints, video, screen);\n  }\n\n  const doScreenshot = () => {\n    //screenshotImage.removeChild(screenshotImage.lastChild);\n    screenshot.style.display = \"none\";\n    screenshotControls.style.display = \"block\";\n    retake.onclick = retakePhoto;\n    use.onclick = usePhoto;\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    canvas.getContext('2d').drawImage(video, 0, 0);\n    var image = document.createElement('img');\n    image.id = \"screenshotImage\";\n    image.className = \"screenshotImage\";\n    image.src = canvas.toDataURL('image/jpeg');\n    screenshotImage.appendChild(image);\n  };\n\n  screenshot.onclick = doScreenshot;\n\n  const retakePhoto = () => {\n    screenshotImage.removeChild(screenshotImage.lastChild);\n    screenshotControls.style.display = \"none\";\n    screenshot.style.display = \"block\";\n  };\n\n  const usePhoto = () => {\n    screen.style.display = \"none\";\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozExitFullScreen) {\n      // Firefox\n      document.mozExitFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      // Chrome, Safari, and Opera\n      document.webkitExitFullscreen();\n    } else if (document.msExitFullscreen) {\n      // IE/Edge\n      document.msExitFullscreen();\n    }\n  };\n\n  const getCameraSelection = async () => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    const videoDevices = devices.filter(device => device.kind === 'videoinput');\n    const options = videoDevices.map(videoDevice => {\n      return `<option value=\"${videoDevice.deviceId}\">${videoDevice.label}</option>`;\n    });\n    cameraOptions.innerHTML = options.join('');\n  };\n\n  getCameraSelection();\n}\n\n_c = Camera;\n\nasync function startStream(constraints, video, screen) {\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  handleStream(stream, video);\n  makeFullscreen(screen);\n}\n\nfunction handleStream(stream, video) {\n  video.srcObject = stream;\n}\n\nfunction makeFullscreen(screen) {\n  if (screen.requestFullscreen) {\n    screen.requestFullscreen();\n  } else if (screen.mozRequestFullScreen) {\n    // Firefox\n    screen.mozRequestFullScreen();\n  } else if (screen.webkitRequestFullscreen) {\n    // Chrome, Safari, and Opera\n    screen.webkitRequestFullscreen();\n  } else if (screen.msRequestFullscreen) {\n    // IE/Edge\n    screen.msRequestFullscreen();\n  }\n}\n\nexport default Camera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/src/Camera.js"],"names":["Camera","screenshot","document","getElementById","cameraOptions","video","canvas","screenshotImage","screen","screenshotControls","retake","use","querySelectorAll","constraints","width","min","ideal","max","height","onchange","updatedConstraints","deviceId","exact","value","startStream","navigator","mediaDevices","getUserMedia","doScreenshot","style","display","onclick","retakePhoto","usePhoto","videoWidth","videoHeight","getContext","drawImage","image","createElement","id","className","src","toDataURL","appendChild","removeChild","lastChild","exitFullscreen","mozExitFullScreen","webkitExitFullscreen","msExitFullscreen","getCameraSelection","devices","enumerateDevices","videoDevices","filter","device","kind","options","map","videoDevice","label","innerHTML","join","stream","handleStream","makeFullscreen","srcObject","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen"],"mappings":"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","sourcesContent":["function Camera(){\n    const screenshot = document.getElementById('screenshotButton');\n    const cameraOptions = document.getElementById('select');\n    const video = document.getElementById('video');\n    const canvas = document.getElementById('canvas');\n    const screenshotImage = document.getElementById('display-style');\n    const screen = document.getElementById('display-cover');\n    const screenshotControls = document.getElementById('screenshotControls');\n    const [retake, use] = screenshotControls.querySelectorAll('button');\n\n    const constraints = {\n        video: {\n            width: {\n            min: 1280,\n            ideal: 1920,\n            max: 2560,\n            },\n            height: {\n            min: 720,\n            ideal: 1080,\n            max: 1440\n            },\n        }\n    };\n\n    cameraOptions.onchange = () => {\n        const updatedConstraints = {\n            ...constraints,\n            deviceId: {\n            exact: cameraOptions.value\n            }\n        };\n\n        startStream(updatedConstraints, video, screen);\n    };\n\n    if ('mediaDevices' in navigator && navigator.mediaDevices.getUserMedia) {\n        const updatedConstraints = {\n        ...constraints,\n        deviceId: {\n            exact: cameraOptions.value\n        }\n        };\n        startStream(updatedConstraints, video, screen);\n    }\n\n    const doScreenshot = () => {\n        //screenshotImage.removeChild(screenshotImage.lastChild);\n\n        screenshot.style.display = \"none\";\n        screenshotControls.style.display = \"block\";\n\n        retake.onclick = retakePhoto;\n        use.onclick = usePhoto;\n\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        canvas.getContext('2d').drawImage(video, 0, 0);\n\n        var image = document.createElement('img');\n        image.id = \"screenshotImage\";\n        image.className = \"screenshotImage\";\n        image.src = canvas.toDataURL('image/jpeg');\n        screenshotImage.appendChild(image);\n    };\n\n    screenshot.onclick = doScreenshot;\n\n    const retakePhoto = () => {\n        screenshotImage.removeChild(screenshotImage.lastChild);\n        screenshotControls.style.display = \"none\";\n        screenshot.style.display = \"block\";\n    };\n\n    const usePhoto = () => {\n        screen.style.display = \"none\";\n\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozExitFullScreen) { // Firefox\n            document.mozExitFullScreen();\n        } else if (document.webkitExitFullscreen) { // Chrome, Safari, and Opera\n            document.webkitExitFullscreen();\n        } else if (document.msExitFullscreen) { // IE/Edge\n            document.msExitFullscreen();\n        }\n    };\n\n    const getCameraSelection = async () => {\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const videoDevices = devices.filter(device => device.kind === 'videoinput');\n        const options = videoDevices.map(videoDevice => {\n            return `<option value=\"${videoDevice.deviceId}\">${videoDevice.label}</option>`;\n        });\n        cameraOptions.innerHTML = options.join('');\n    };\n\n    getCameraSelection();\n}\n\nasync function startStream(constraints, video, screen) {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    handleStream(stream, video);\n    makeFullscreen(screen);\n}\n\nfunction handleStream(stream, video) {\n    video.srcObject = stream;\n}\n\nfunction makeFullscreen(screen) {\n    if (screen.requestFullscreen) {\n        screen.requestFullscreen();\n    } else if (screen.mozRequestFullScreen) { // Firefox\n        screen.mozRequestFullScreen();\n    } else if (screen.webkitRequestFullscreen) { // Chrome, Safari, and Opera\n        screen.webkitRequestFullscreen();\n    } else if (screen.msRequestFullscreen) { // IE/Edge\n        screen.msRequestFullscreen();\n    }\n}\n\nexport default Camera;"]},"metadata":{},"sourceType":"module"}