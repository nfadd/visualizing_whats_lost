{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nvar HapticEngine = {\n  getEngine: function getEngine() {\n    var _a;\n\n    var win = window;\n    return win.TapticEngine || ((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Haptics')) && win.Capacitor.Plugins.Haptics;\n  },\n  available: function available() {\n    return !!this.getEngine();\n  },\n  isCordova: function isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor: function isCapacitor() {\n    var win = window;\n    return !!win.Capacitor;\n  },\n  impact: function impact(options) {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    var style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({\n      style: style\n    });\n  },\n  notification: function notification(options) {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    var style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({\n      style: style\n    });\n  },\n  selection: function selection() {\n    this.impact({\n      style: 'light'\n    });\n  },\n  selectionStart: function selectionStart() {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    } else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged: function selectionChanged() {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    } else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd: function selectionEnd() {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    } else {\n      engine.gestureSelectionEnd();\n    }\n  }\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\n\nvar hapticSelection = function hapticSelection() {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\n\n\nvar hapticSelectionStart = function hapticSelectionStart() {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\n\n\nvar hapticSelectionChanged = function hapticSelectionChanged() {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\n\n\nvar hapticSelectionEnd = function hapticSelectionEnd() {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\n\n\nvar hapticImpact = function hapticImpact(options) {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticImpact as c, hapticSelection as d, hapticSelectionEnd as h };","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@ionic/core/components/haptic.js"],"names":["HapticEngine","getEngine","_a","win","window","TapticEngine","Capacitor","isPluginAvailable","Plugins","Haptics","available","isCordova","isCapacitor","impact","options","engine","style","toUpperCase","notification","selection","selectionStart","gestureSelectionStart","selectionChanged","gestureSelectionChanged","selectionEnd","gestureSelectionEnd","hapticSelection","hapticSelectionStart","hapticSelectionChanged","hapticSelectionEnd","hapticImpact","a","b","c","d","h"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst HapticEngine = {\n  getEngine() {\n    var _a;\n    const win = window;\n    return win.TapticEngine || (((_a = win.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('Haptics')) && win.Capacitor.Plugins.Haptics);\n  },\n  available() {\n    return !!this.getEngine();\n  },\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n  impact(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({ style });\n  },\n  notification(options) {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({ style });\n  },\n  selection() {\n    this.impact({ style: 'light' });\n  },\n  selectionStart() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    }\n    else {\n      engine.gestureSelectionStart();\n    }\n  },\n  selectionChanged() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    }\n    else {\n      engine.gestureSelectionChanged();\n    }\n  },\n  selectionEnd() {\n    const engine = this.getEngine();\n    if (!engine) {\n      return;\n    }\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    }\n    else {\n      engine.gestureSelectionEnd();\n    }\n  },\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\nconst hapticImpact = (options) => {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticImpact as c, hapticSelection as d, hapticSelectionEnd as h };\n"]},"metadata":{},"sourceType":"module"}