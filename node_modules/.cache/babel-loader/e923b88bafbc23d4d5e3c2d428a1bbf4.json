{"ast":null,"code":"function Camera() {\n  const controls = document.getElementById('controls');\n  const cameraOptions = document.getElementById('select');\n  const video = document.getElementById('video');\n  const canvas = document.getElementById('canvas');\n  const screenshotImage = document.getElementById('screenshot');\n  const buttons = [...controls.querySelectorAll('button')];\n  const [play, screenshot] = buttons;\n  const constraints = {\n    video: {\n      width: {\n        min: 1280,\n        ideal: 1920,\n        max: 2560\n      },\n      height: {\n        min: 720,\n        ideal: 1080,\n        max: 1440\n      }\n    }\n  };\n\n  cameraOptions.onchange = () => {\n    const updatedConstraints = { ...constraints,\n      deviceId: {\n        exact: cameraOptions.value\n      }\n    };\n    startStream(updatedConstraints, video, play, screenshot);\n  };\n\n  if ('mediaDevices' in navigator && navigator.mediaDevices.getUserMedia) {\n    const updatedConstraints = { ...constraints,\n      deviceId: {\n        exact: cameraOptions.value\n      }\n    };\n    startStream(updatedConstraints, video, play, screenshot);\n  }\n\n  const doScreenshot = () => {\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    canvas.getContext('2d').drawImage(video, 0, 0);\n    screenshotImage.src = canvas.toDataURL('image/webp');\n    screenshotImage.classList.remove('d-none');\n  };\n\n  screenshot.onclick = doScreenshot;\n\n  const getCameraSelection = async () => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    const videoDevices = devices.filter(device => device.kind === 'videoinput');\n    const options = videoDevices.map(videoDevice => {\n      return `<option value=\"${videoDevice.deviceId}\">${videoDevice.label}</option>`;\n    });\n    cameraOptions.innerHTML = options.join('');\n  };\n\n  getCameraSelection();\n}\n\n_c = Camera;\n\nasync function startStream(constraints, video, play, screenshot) {\n  const stream = await navigator.mediaDevices.getUserMedia(constraints);\n  handleStream(stream, video, play, screenshot);\n}\n\nfunction handleStream(stream, video, play, screenshot) {\n  video.srcObject = stream;\n  play.classList.add('d-none');\n  screenshot.classList.remove('d-none');\n}\n\nexport default Camera;\n\nvar _c;\n\n$RefreshReg$(_c, \"Camera\");","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/src/Camera.js"],"names":["Camera","controls","document","getElementById","cameraOptions","video","canvas","screenshotImage","buttons","querySelectorAll","play","screenshot","constraints","width","min","ideal","max","height","onchange","updatedConstraints","deviceId","exact","value","startStream","navigator","mediaDevices","getUserMedia","doScreenshot","videoWidth","videoHeight","getContext","drawImage","src","toDataURL","classList","remove","onclick","getCameraSelection","devices","enumerateDevices","videoDevices","filter","device","kind","options","map","videoDevice","label","innerHTML","join","stream","handleStream","srcObject","add"],"mappings":"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","sourcesContent":["function Camera(){\n    const controls = document.getElementById('controls');\n    const cameraOptions = document.getElementById('select');\n    const video = document.getElementById('video');\n    const canvas = document.getElementById('canvas');\n    const screenshotImage = document.getElementById('screenshot');\n    const buttons = [...controls.querySelectorAll('button')];\n\n    const [play, screenshot] = buttons;\n\n    const constraints = {\n        video: {\n            width: {\n            min: 1280,\n            ideal: 1920,\n            max: 2560,\n            },\n            height: {\n            min: 720,\n            ideal: 1080,\n            max: 1440\n            },\n        }\n    };\n\n    cameraOptions.onchange = () => {\n        const updatedConstraints = {\n            ...constraints,\n            deviceId: {\n            exact: cameraOptions.value\n            }\n        };\n\n        startStream(updatedConstraints, video, play, screenshot);\n    };\n\n    if ('mediaDevices' in navigator && navigator.mediaDevices.getUserMedia) {\n        const updatedConstraints = {\n        ...constraints,\n        deviceId: {\n            exact: cameraOptions.value\n        }\n        };\n        startStream(updatedConstraints, video, play, screenshot);\n    }\n\n    const doScreenshot = () => {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        canvas.getContext('2d').drawImage(video, 0, 0);\n        screenshotImage.src = canvas.toDataURL('image/webp');\n        screenshotImage.classList.remove('d-none');\n    };\n\n    screenshot.onclick = doScreenshot;\n\n    const getCameraSelection = async () => {\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const videoDevices = devices.filter(device => device.kind === 'videoinput');\n        const options = videoDevices.map(videoDevice => {\n            return `<option value=\"${videoDevice.deviceId}\">${videoDevice.label}</option>`;\n        });\n        cameraOptions.innerHTML = options.join('');\n    };\n\n    getCameraSelection();\n}\n\nasync function startStream(constraints, video, play, screenshot) {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    handleStream(stream, video, play, screenshot);\n}\n\nfunction handleStream(stream, video, play, screenshot) {\n    video.srcObject = stream;\n    play.classList.add('d-none');\n    screenshot.classList.remove('d-none');\n}\n\nexport default Camera;"]},"metadata":{},"sourceType":"module"}