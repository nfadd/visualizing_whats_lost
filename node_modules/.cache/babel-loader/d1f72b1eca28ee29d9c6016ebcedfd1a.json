{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { c as chevronDown } from './index6.js';\nimport { c as config, b as getIonMode } from './ionic-global.js';\nimport { r as raf, t as transitionEndAsync, a as addEventListener, b as removeEventListener, g as getElementRoot } from './helpers.js';\nimport { d as defineCustomElement$2 } from './icon.js';\nconst accordionIosCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}\";\nconst accordionMdCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}\";\nconst Accordion = /*@__PURE__*/proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    var _this;\n\n    super();\n    _this = this;\n\n    this.__registerHost();\n\n    this.__attachShadow();\n\n    this.updateListener = () => this.updateState(false);\n\n    this.state = 1\n    /* Collapsed */\n    ;\n    this.isNext = false;\n    this.isPrevious = false;\n    /**\n     * The value of the accordion. Defaults to an autogenerated\n     * value.\n     */\n\n    this.value = `ion-accordion-${accordionIds++}`;\n    /**\n     * If `true`, the accordion cannot be interacted with.\n     */\n\n    this.disabled = false;\n    /**\n     * If `true`, the accordion cannot be interacted with,\n     * but does not alter the opacity.\n     */\n\n    this.readonly = false;\n    /**\n     * The toggle icon to use. This icon will be\n     * rotated when the accordion is expanded\n     * or collapsed.\n     */\n\n    this.toggleIcon = chevronDown;\n    /**\n     * The slot inside of `ion-item` to\n     * place the toggle icon. Defaults to `'end'`.\n     */\n\n    this.toggleIconSlot = 'end';\n\n    this.setItemDefaults = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * For a11y purposes, we make\n       * the ion-item a button so users\n       * can tab to it and use keyboard\n       * navigation to get around.\n       */\n\n\n      ionItem.button = true;\n      ionItem.detail = false;\n      /**\n       * By default, the lines in an\n       * item should be full here, but\n       * only do that if a user has\n       * not explicitly overridden them\n       */\n\n      if (ionItem.lines === undefined) {\n        ionItem.lines = 'full';\n      }\n    };\n\n    this.getSlottedHeaderIonItem = () => {\n      const {\n        headerEl\n      } = this;\n\n      if (!headerEl) {\n        return;\n      }\n      /**\n       * Get the first ion-item\n       * slotted in the header slot\n       */\n\n\n      const slot = headerEl.querySelector('slot');\n\n      if (!slot) {\n        return;\n      } // This is not defined in unit tests\n\n\n      const ionItem = slot.assignedElements && slot.assignedElements().find(el => el.tagName === 'ION-ITEM');\n      return ionItem;\n    };\n\n    this.setAria = function () {\n      let expanded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      const ionItem = _this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * Get the native <button> element inside of\n       * ion-item because that is what will be focused\n       */\n\n\n      const root = getElementRoot(ionItem);\n      const button = root.querySelector('button');\n\n      if (!button) {\n        return;\n      }\n\n      button.setAttribute('aria-expanded', `${expanded}`);\n    };\n\n    this.slotToggleIcon = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n\n      const {\n        toggleIconSlot,\n        toggleIcon\n      } = this;\n      /**\n       * Check if there already is a toggle icon.\n       * If so, do not add another one.\n       */\n\n      const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n\n      if (existingToggleIcon) {\n        return;\n      }\n\n      const iconEl = document.createElement('ion-icon');\n      iconEl.slot = toggleIconSlot;\n      iconEl.lazy = false;\n      iconEl.classList.add('ion-accordion-toggle-icon');\n      iconEl.icon = toggleIcon;\n      iconEl.setAttribute('aria-hidden', 'true');\n      ionItem.appendChild(iconEl);\n    };\n\n    this.expandAccordion = function () {\n      let initialUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (initialUpdate) {\n        _this.state = 4\n        /* Expanded */\n        ;\n        return;\n      }\n\n      if (_this.state === 4\n      /* Expanded */\n      ) {\n        return;\n      }\n\n      const {\n        contentEl,\n        contentElWrapper\n      } = _this;\n\n      if (contentEl === undefined || contentElWrapper === undefined) {\n        return;\n      }\n\n      if (_this.currentRaf !== undefined) {\n        cancelAnimationFrame(_this.currentRaf);\n      }\n\n      if (_this.shouldAnimate()) {\n        raf(() => {\n          _this.state = 8\n          /* Expanding */\n          ;\n          _this.currentRaf = raf(async () => {\n            const contentHeight = contentElWrapper.offsetHeight;\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            contentEl.style.setProperty('max-height', `${contentHeight}px`);\n            await waitForTransition;\n            _this.state = 4\n            /* Expanded */\n            ;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      } else {\n        _this.state = 4\n        /* Expanded */\n        ;\n      }\n    };\n\n    this.collapseAccordion = function () {\n      let initialUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (initialUpdate) {\n        _this.state = 1\n        /* Collapsed */\n        ;\n        return;\n      }\n\n      if (_this.state === 1\n      /* Collapsed */\n      ) {\n        return;\n      }\n\n      const {\n        contentEl\n      } = _this;\n\n      if (contentEl === undefined) {\n        return;\n      }\n\n      if (_this.currentRaf !== undefined) {\n        cancelAnimationFrame(_this.currentRaf);\n      }\n\n      if (_this.shouldAnimate()) {\n        _this.currentRaf = raf(async () => {\n          const contentHeight = contentEl.offsetHeight;\n          contentEl.style.setProperty('max-height', `${contentHeight}px`);\n          raf(async () => {\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            _this.state = 2\n            /* Collapsing */\n            ;\n            await waitForTransition;\n            _this.state = 1\n            /* Collapsed */\n            ;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      } else {\n        _this.state = 1\n        /* Collapsed */\n        ;\n      }\n    };\n    /**\n     * Helper function to determine if\n     * something should animate.\n     * If prefers-reduced-motion is set\n     * then we should not animate, regardless\n     * of what is set in the config.\n     */\n\n\n    this.shouldAnimate = () => {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n\n      const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n      if (prefersReducedMotion) {\n        return false;\n      }\n\n      const animated = config.get('animated', true);\n\n      if (!animated) {\n        return false;\n      }\n\n      if (this.accordionGroupEl && !this.accordionGroupEl.animated) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.updateState = async function () {\n      let initialUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      const accordionGroup = _this.accordionGroupEl;\n      const accordionValue = _this.value;\n\n      if (!accordionGroup) {\n        return;\n      }\n\n      const value = accordionGroup.value;\n      const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n\n      if (shouldExpand) {\n        _this.expandAccordion(initialUpdate);\n\n        _this.isNext = _this.isPrevious = false;\n      } else {\n        _this.collapseAccordion(initialUpdate);\n        /**\n         * When using popout or inset,\n         * the collapsed accordion items\n         * may need additional border radius\n         * applied. Check to see if the\n         * next or previous accordion is selected.\n         */\n\n\n        const nextAccordion = _this.getNextSibling();\n\n        const nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n\n        if (nextAccordionValue !== undefined) {\n          _this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n        }\n\n        const previousAccordion = _this.getPreviousSibling();\n\n        const previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n\n        if (previousAccordionValue !== undefined) {\n          _this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n        }\n      }\n    };\n\n    this.getNextSibling = () => {\n      if (!this.el) {\n        return;\n      }\n\n      const nextSibling = this.el.nextElementSibling;\n\n      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n\n      return nextSibling;\n    };\n\n    this.getPreviousSibling = () => {\n      if (!this.el) {\n        return;\n      }\n\n      const previousSibling = this.el.previousElementSibling;\n\n      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n\n      return previousSibling;\n    };\n  }\n\n  connectedCallback() {\n    var _a;\n\n    const accordionGroupEl = this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group');\n\n    if (accordionGroupEl) {\n      this.updateState(true);\n      addEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n\n  disconnectedCallback() {\n    const accordionGroupEl = this.accordionGroupEl;\n\n    if (accordionGroupEl) {\n      removeEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n\n  componentDidLoad() {\n    this.setItemDefaults();\n    this.slotToggleIcon();\n    /**\n     * We need to wait a tick because we\n     * just set ionItem.button = true and\n     * the button has not have been rendered yet.\n     */\n\n    raf(() => {\n      /**\n       * Set aria label on button inside of ion-item\n       * once the inner content has been rendered.\n       */\n      const expanded = this.state === 4\n      /* Expanded */\n      || this.state === 8\n      /* Expanding */\n      ;\n      this.setAria(expanded);\n    });\n  }\n\n  toggleExpanded() {\n    const {\n      accordionGroupEl,\n      value,\n      state\n    } = this;\n\n    if (accordionGroupEl) {\n      /**\n       * Because the accordion group may or may\n       * not allow multiple accordions open, we\n       * need to request the toggling of this\n       * accordion and the accordion group will\n       * make the decision on whether or not\n       * to allow it.\n       */\n      const expand = state === 1\n      /* Collapsed */\n      || state === 2\n      /* Collapsing */\n      ;\n      accordionGroupEl.requestAccordionToggle(value, expand);\n    }\n  }\n\n  render() {\n    const {\n      disabled,\n      readonly\n    } = this;\n    const mode = getIonMode(this);\n    const expanded = this.state === 4\n    /* Expanded */\n    || this.state === 8\n    /* Expanding */\n    ;\n    const headerPart = expanded ? 'header expanded' : 'header';\n    const contentPart = expanded ? 'content expanded' : 'content';\n    this.setAria(expanded);\n    return h(Host, {\n      class: {\n        [mode]: true,\n        'accordion-expanding': this.state === 8\n        /* Expanding */\n        ,\n        'accordion-expanded': this.state === 4\n        /* Expanded */\n        ,\n        'accordion-collapsing': this.state === 2\n        /* Collapsing */\n        ,\n        'accordion-collapsed': this.state === 1\n        /* Collapsed */\n        ,\n        'accordion-next': this.isNext,\n        'accordion-previous': this.isPrevious,\n        'accordion-disabled': disabled,\n        'accordion-readonly': readonly,\n        'accordion-animated': config.getBoolean('animated', true)\n      }\n    }, h(\"div\", {\n      onClick: () => this.toggleExpanded(),\n      id: \"header\",\n      part: headerPart,\n      \"aria-controls\": \"content\",\n      ref: headerEl => this.headerEl = headerEl\n    }, h(\"slot\", {\n      name: \"header\"\n    })), h(\"div\", {\n      id: \"content\",\n      part: contentPart,\n      role: \"region\",\n      \"aria-labelledby\": \"header\",\n      ref: contentEl => this.contentEl = contentEl\n    }, h(\"div\", {\n      id: \"content-wrapper\",\n      ref: contentElWrapper => this.contentElWrapper = contentElWrapper\n    }, h(\"slot\", {\n      name: \"content\"\n    }))));\n  }\n\n  static get delegatesFocus() {\n    return true;\n  }\n\n  get el() {\n    return this;\n  }\n\n  static get style() {\n    return {\n      ios: accordionIosCss,\n      md: accordionMdCss\n    };\n  }\n\n}, [49, \"ion-accordion\", {\n  \"value\": [1],\n  \"disabled\": [4],\n  \"readonly\": [4],\n  \"toggleIcon\": [1, \"toggle-icon\"],\n  \"toggleIconSlot\": [1, \"toggle-icon-slot\"],\n  \"state\": [32],\n  \"isNext\": [32],\n  \"isPrevious\": [32]\n}]);\nlet accordionIds = 0;\n\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  const components = [\"ion-accordion\", \"ion-icon\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-accordion\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Accordion);\n        }\n\n        break;\n\n      case \"ion-icon\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$2();\n        }\n\n        break;\n    }\n  });\n}\n\nconst IonAccordion = Accordion;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonAccordion, defineCustomElement };","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@ionic/core/components/ion-accordion.js"],"names":["proxyCustomElement","HTMLElement","h","Host","c","chevronDown","config","b","getIonMode","r","raf","t","transitionEndAsync","a","addEventListener","removeEventListener","g","getElementRoot","d","defineCustomElement$2","accordionIosCss","accordionMdCss","Accordion","constructor","__registerHost","__attachShadow","updateListener","updateState","state","isNext","isPrevious","value","accordionIds","disabled","readonly","toggleIcon","toggleIconSlot","setItemDefaults","ionItem","getSlottedHeaderIonItem","button","detail","lines","undefined","headerEl","slot","querySelector","assignedElements","find","el","tagName","setAria","expanded","root","setAttribute","slotToggleIcon","existingToggleIcon","iconEl","document","createElement","lazy","classList","add","icon","appendChild","expandAccordion","initialUpdate","contentEl","contentElWrapper","currentRaf","cancelAnimationFrame","shouldAnimate","contentHeight","offsetHeight","waitForTransition","style","setProperty","removeProperty","collapseAccordion","window","prefersReducedMotion","matchMedia","matches","animated","get","accordionGroupEl","accordionGroup","accordionValue","shouldExpand","Array","isArray","includes","nextAccordion","getNextSibling","nextAccordionValue","previousAccordion","getPreviousSibling","previousAccordionValue","nextSibling","nextElementSibling","previousSibling","previousElementSibling","connectedCallback","_a","closest","disconnectedCallback","componentDidLoad","toggleExpanded","expand","requestAccordionToggle","render","mode","headerPart","contentPart","class","getBoolean","onClick","id","part","ref","name","role","delegatesFocus","ios","md","defineCustomElement$1","customElements","components","forEach","define","IonAccordion","defineCustomElement"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { c as chevronDown } from './index6.js';\nimport { c as config, b as getIonMode } from './ionic-global.js';\nimport { r as raf, t as transitionEndAsync, a as addEventListener, b as removeEventListener, g as getElementRoot } from './helpers.js';\nimport { d as defineCustomElement$2 } from './icon.js';\n\nconst accordionIosCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}\";\n\nconst accordionMdCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}\";\n\nconst Accordion = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.updateListener = () => this.updateState(false);\n    this.state = 1 /* Collapsed */;\n    this.isNext = false;\n    this.isPrevious = false;\n    /**\n     * The value of the accordion. Defaults to an autogenerated\n     * value.\n     */\n    this.value = `ion-accordion-${accordionIds++}`;\n    /**\n     * If `true`, the accordion cannot be interacted with.\n     */\n    this.disabled = false;\n    /**\n     * If `true`, the accordion cannot be interacted with,\n     * but does not alter the opacity.\n     */\n    this.readonly = false;\n    /**\n     * The toggle icon to use. This icon will be\n     * rotated when the accordion is expanded\n     * or collapsed.\n     */\n    this.toggleIcon = chevronDown;\n    /**\n     * The slot inside of `ion-item` to\n     * place the toggle icon. Defaults to `'end'`.\n     */\n    this.toggleIconSlot = 'end';\n    this.setItemDefaults = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * For a11y purposes, we make\n       * the ion-item a button so users\n       * can tab to it and use keyboard\n       * navigation to get around.\n       */\n      ionItem.button = true;\n      ionItem.detail = false;\n      /**\n       * By default, the lines in an\n       * item should be full here, but\n       * only do that if a user has\n       * not explicitly overridden them\n       */\n      if (ionItem.lines === undefined) {\n        ionItem.lines = 'full';\n      }\n    };\n    this.getSlottedHeaderIonItem = () => {\n      const { headerEl } = this;\n      if (!headerEl) {\n        return;\n      }\n      /**\n       * Get the first ion-item\n       * slotted in the header slot\n       */\n      const slot = headerEl.querySelector('slot');\n      if (!slot) {\n        return;\n      }\n      // This is not defined in unit tests\n      const ionItem = slot.assignedElements &&\n        slot.assignedElements().find((el) => el.tagName === 'ION-ITEM');\n      return ionItem;\n    };\n    this.setAria = (expanded = false) => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * Get the native <button> element inside of\n       * ion-item because that is what will be focused\n       */\n      const root = getElementRoot(ionItem);\n      const button = root.querySelector('button');\n      if (!button) {\n        return;\n      }\n      button.setAttribute('aria-expanded', `${expanded}`);\n    };\n    this.slotToggleIcon = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n      if (!ionItem) {\n        return;\n      }\n      const { toggleIconSlot, toggleIcon } = this;\n      /**\n       * Check if there already is a toggle icon.\n       * If so, do not add another one.\n       */\n      const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n      if (existingToggleIcon) {\n        return;\n      }\n      const iconEl = document.createElement('ion-icon');\n      iconEl.slot = toggleIconSlot;\n      iconEl.lazy = false;\n      iconEl.classList.add('ion-accordion-toggle-icon');\n      iconEl.icon = toggleIcon;\n      iconEl.setAttribute('aria-hidden', 'true');\n      ionItem.appendChild(iconEl);\n    };\n    this.expandAccordion = (initialUpdate = false) => {\n      if (initialUpdate) {\n        this.state = 4 /* Expanded */;\n        return;\n      }\n      if (this.state === 4 /* Expanded */) {\n        return;\n      }\n      const { contentEl, contentElWrapper } = this;\n      if (contentEl === undefined || contentElWrapper === undefined) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        raf(() => {\n          this.state = 8 /* Expanding */;\n          this.currentRaf = raf(async () => {\n            const contentHeight = contentElWrapper.offsetHeight;\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            contentEl.style.setProperty('max-height', `${contentHeight}px`);\n            await waitForTransition;\n            this.state = 4 /* Expanded */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      }\n      else {\n        this.state = 4 /* Expanded */;\n      }\n    };\n    this.collapseAccordion = (initialUpdate = false) => {\n      if (initialUpdate) {\n        this.state = 1 /* Collapsed */;\n        return;\n      }\n      if (this.state === 1 /* Collapsed */) {\n        return;\n      }\n      const { contentEl } = this;\n      if (contentEl === undefined) {\n        return;\n      }\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n      if (this.shouldAnimate()) {\n        this.currentRaf = raf(async () => {\n          const contentHeight = contentEl.offsetHeight;\n          contentEl.style.setProperty('max-height', `${contentHeight}px`);\n          raf(async () => {\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            this.state = 2 /* Collapsing */;\n            await waitForTransition;\n            this.state = 1 /* Collapsed */;\n            contentEl.style.removeProperty('max-height');\n          });\n        });\n      }\n      else {\n        this.state = 1 /* Collapsed */;\n      }\n    };\n    /**\n     * Helper function to determine if\n     * something should animate.\n     * If prefers-reduced-motion is set\n     * then we should not animate, regardless\n     * of what is set in the config.\n     */\n    this.shouldAnimate = () => {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n      const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n      if (prefersReducedMotion) {\n        return false;\n      }\n      const animated = config.get('animated', true);\n      if (!animated) {\n        return false;\n      }\n      if (this.accordionGroupEl && !this.accordionGroupEl.animated) {\n        return false;\n      }\n      return true;\n    };\n    this.updateState = async (initialUpdate = false) => {\n      const accordionGroup = this.accordionGroupEl;\n      const accordionValue = this.value;\n      if (!accordionGroup) {\n        return;\n      }\n      const value = accordionGroup.value;\n      const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n      if (shouldExpand) {\n        this.expandAccordion(initialUpdate);\n        this.isNext = this.isPrevious = false;\n      }\n      else {\n        this.collapseAccordion(initialUpdate);\n        /**\n         * When using popout or inset,\n         * the collapsed accordion items\n         * may need additional border radius\n         * applied. Check to see if the\n         * next or previous accordion is selected.\n         */\n        const nextAccordion = this.getNextSibling();\n        const nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;\n        if (nextAccordionValue !== undefined) {\n          this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n        }\n        const previousAccordion = this.getPreviousSibling();\n        const previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;\n        if (previousAccordionValue !== undefined) {\n          this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n        }\n      }\n    };\n    this.getNextSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const nextSibling = this.el.nextElementSibling;\n      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return nextSibling;\n    };\n    this.getPreviousSibling = () => {\n      if (!this.el) {\n        return;\n      }\n      const previousSibling = this.el.previousElementSibling;\n      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n      return previousSibling;\n    };\n  }\n  connectedCallback() {\n    var _a;\n    const accordionGroupEl = (this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group'));\n    if (accordionGroupEl) {\n      this.updateState(true);\n      addEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n  disconnectedCallback() {\n    const accordionGroupEl = this.accordionGroupEl;\n    if (accordionGroupEl) {\n      removeEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n  componentDidLoad() {\n    this.setItemDefaults();\n    this.slotToggleIcon();\n    /**\n     * We need to wait a tick because we\n     * just set ionItem.button = true and\n     * the button has not have been rendered yet.\n     */\n    raf(() => {\n      /**\n       * Set aria label on button inside of ion-item\n       * once the inner content has been rendered.\n       */\n      const expanded = this.state === 4 /* Expanded */ || this.state === 8 /* Expanding */;\n      this.setAria(expanded);\n    });\n  }\n  toggleExpanded() {\n    const { accordionGroupEl, value, state } = this;\n    if (accordionGroupEl) {\n      /**\n       * Because the accordion group may or may\n       * not allow multiple accordions open, we\n       * need to request the toggling of this\n       * accordion and the accordion group will\n       * make the decision on whether or not\n       * to allow it.\n       */\n      const expand = state === 1 /* Collapsed */ || state === 2 /* Collapsing */;\n      accordionGroupEl.requestAccordionToggle(value, expand);\n    }\n  }\n  render() {\n    const { disabled, readonly } = this;\n    const mode = getIonMode(this);\n    const expanded = this.state === 4 /* Expanded */ || this.state === 8 /* Expanding */;\n    const headerPart = expanded ? 'header expanded' : 'header';\n    const contentPart = expanded ? 'content expanded' : 'content';\n    this.setAria(expanded);\n    return (h(Host, { class: {\n        [mode]: true,\n        'accordion-expanding': this.state === 8 /* Expanding */,\n        'accordion-expanded': this.state === 4 /* Expanded */,\n        'accordion-collapsing': this.state === 2 /* Collapsing */,\n        'accordion-collapsed': this.state === 1 /* Collapsed */,\n        'accordion-next': this.isNext,\n        'accordion-previous': this.isPrevious,\n        'accordion-disabled': disabled,\n        'accordion-readonly': readonly,\n        'accordion-animated': config.getBoolean('animated', true),\n      } }, h(\"div\", { onClick: () => this.toggleExpanded(), id: \"header\", part: headerPart, \"aria-controls\": \"content\", ref: (headerEl) => (this.headerEl = headerEl) }, h(\"slot\", { name: \"header\" })), h(\"div\", { id: \"content\", part: contentPart, role: \"region\", \"aria-labelledby\": \"header\", ref: (contentEl) => (this.contentEl = contentEl) }, h(\"div\", { id: \"content-wrapper\", ref: (contentElWrapper) => (this.contentElWrapper = contentElWrapper) }, h(\"slot\", { name: \"content\" })))));\n  }\n  static get delegatesFocus() { return true; }\n  get el() { return this; }\n  static get style() { return {\n    ios: accordionIosCss,\n    md: accordionMdCss\n  }; }\n}, [49, \"ion-accordion\", {\n    \"value\": [1],\n    \"disabled\": [4],\n    \"readonly\": [4],\n    \"toggleIcon\": [1, \"toggle-icon\"],\n    \"toggleIconSlot\": [1, \"toggle-icon-slot\"],\n    \"state\": [32],\n    \"isNext\": [32],\n    \"isPrevious\": [32]\n  }]);\nlet accordionIds = 0;\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-accordion\", \"ion-icon\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-accordion\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Accordion);\n      }\n      break;\n    case \"ion-icon\":\n      if (!customElements.get(tagName)) {\n        defineCustomElement$2();\n      }\n      break;\n  } });\n}\n\nconst IonAccordion = Accordion;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonAccordion, defineCustomElement };\n"]},"metadata":{},"sourceType":"module"}