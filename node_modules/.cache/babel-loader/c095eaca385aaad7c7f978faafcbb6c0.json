{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { writeTask } from '@stencil/core/internal/client';\nimport { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic.js';\nimport { createGesture } from './index2.js';\n\nconst createButtonActiveGesture = (el, isButton) => {\n  let currentTouchedButton;\n  let initialTouchedButton;\n\n  const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    const target = document.elementFromPoint(x, y);\n\n    if (!target || !isButton(target)) {\n      clearActiveButton();\n      return;\n    }\n\n    if (target !== currentTouchedButton) {\n      clearActiveButton();\n      setActiveButton(target, hapticFeedbackFn);\n    }\n  };\n\n  const setActiveButton = (button, hapticFeedbackFn) => {\n    currentTouchedButton = button;\n\n    if (!initialTouchedButton) {\n      initialTouchedButton = currentTouchedButton;\n    }\n\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.add('ion-activated'));\n    hapticFeedbackFn();\n  };\n\n  const clearActiveButton = function () {\n    let dispatchClick = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!currentTouchedButton) {\n      return;\n    }\n\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.remove('ion-activated'));\n    /**\n     * Clicking on one button, but releasing on another button\n     * does not dispatch a click event in browsers, so we\n     * need to do it manually here. Some browsers will\n     * dispatch a click if clicking on one button, dragging over\n     * another button, and releasing on the original button. In that\n     * case, we need to make sure we do not cause a double click there.\n     */\n\n    if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n      currentTouchedButton.click();\n    }\n\n    currentTouchedButton = undefined;\n  };\n\n  return createGesture({\n    el,\n    gestureName: 'buttonActiveDrag',\n    threshold: 0,\n    onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n    onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n    onEnd: () => {\n      clearActiveButton(true);\n      hapticSelectionEnd();\n      initialTouchedButton = undefined;\n    }\n  });\n};\n\nexport { createButtonActiveGesture as c };","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@ionic/core/components/button-active.js"],"names":["writeTask","h","hapticSelectionEnd","a","hapticSelectionStart","b","hapticSelectionChanged","createGesture","createButtonActiveGesture","el","isButton","currentTouchedButton","initialTouchedButton","activateButtonAtPoint","x","y","hapticFeedbackFn","document","target","elementFromPoint","clearActiveButton","setActiveButton","button","buttonToModify","classList","add","dispatchClick","remove","click","undefined","gestureName","threshold","onStart","ev","currentX","currentY","onMove","onEnd","c"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,+BAA1B;AACA,SAASC,CAAC,IAAIC,kBAAd,EAAkCC,CAAC,IAAIC,oBAAvC,EAA6DC,CAAC,IAAIC,sBAAlE,QAAgG,aAAhG;AACA,SAASC,aAAT,QAA8B,aAA9B;;AAEA,MAAMC,yBAAyB,GAAG,CAACC,EAAD,EAAKC,QAAL,KAAkB;AAClD,MAAIC,oBAAJ;AACA,MAAIC,oBAAJ;;AACA,QAAMC,qBAAqB,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,gBAAP,KAA4B;AACxD,QAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACnC;AACD;;AACD,UAAMC,MAAM,GAAGD,QAAQ,CAACE,gBAAT,CAA0BL,CAA1B,EAA6BC,CAA7B,CAAf;;AACA,QAAI,CAACG,MAAD,IAAW,CAACR,QAAQ,CAACQ,MAAD,CAAxB,EAAkC;AAChCE,MAAAA,iBAAiB;AACjB;AACD;;AACD,QAAIF,MAAM,KAAKP,oBAAf,EAAqC;AACnCS,MAAAA,iBAAiB;AACjBC,MAAAA,eAAe,CAACH,MAAD,EAASF,gBAAT,CAAf;AACD;AACF,GAbD;;AAcA,QAAMK,eAAe,GAAG,CAACC,MAAD,EAASN,gBAAT,KAA8B;AACpDL,IAAAA,oBAAoB,GAAGW,MAAvB;;AACA,QAAI,CAACV,oBAAL,EAA2B;AACzBA,MAAAA,oBAAoB,GAAGD,oBAAvB;AACD;;AACD,UAAMY,cAAc,GAAGZ,oBAAvB;AACAX,IAAAA,SAAS,CAAC,MAAMuB,cAAc,CAACC,SAAf,CAAyBC,GAAzB,CAA6B,eAA7B,CAAP,CAAT;AACAT,IAAAA,gBAAgB;AACjB,GARD;;AASA,QAAMI,iBAAiB,GAAG,YAA2B;AAAA,QAA1BM,aAA0B,uEAAV,KAAU;;AACnD,QAAI,CAACf,oBAAL,EAA2B;AACzB;AACD;;AACD,UAAMY,cAAc,GAAGZ,oBAAvB;AACAX,IAAAA,SAAS,CAAC,MAAMuB,cAAc,CAACC,SAAf,CAAyBG,MAAzB,CAAgC,eAAhC,CAAP,CAAT;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,QAAID,aAAa,IAAId,oBAAoB,KAAKD,oBAA9C,EAAoE;AAClEA,MAAAA,oBAAoB,CAACiB,KAArB;AACD;;AACDjB,IAAAA,oBAAoB,GAAGkB,SAAvB;AACD,GAlBD;;AAmBA,SAAOtB,aAAa,CAAC;AACnBE,IAAAA,EADmB;AAEnBqB,IAAAA,WAAW,EAAE,kBAFM;AAGnBC,IAAAA,SAAS,EAAE,CAHQ;AAInBC,IAAAA,OAAO,EAAGC,EAAD,IAAQpB,qBAAqB,CAACoB,EAAE,CAACC,QAAJ,EAAcD,EAAE,CAACE,QAAjB,EAA2B/B,oBAA3B,CAJnB;AAKnBgC,IAAAA,MAAM,EAAGH,EAAD,IAAQpB,qBAAqB,CAACoB,EAAE,CAACC,QAAJ,EAAcD,EAAE,CAACE,QAAjB,EAA2B7B,sBAA3B,CALlB;AAMnB+B,IAAAA,KAAK,EAAE,MAAM;AACXjB,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAlB,MAAAA,kBAAkB;AAClBU,MAAAA,oBAAoB,GAAGiB,SAAvB;AACD;AAVkB,GAAD,CAApB;AAYD,CAzDD;;AA2DA,SAASrB,yBAAyB,IAAI8B,CAAtC","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { writeTask } from '@stencil/core/internal/client';\nimport { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic.js';\nimport { createGesture } from './index2.js';\n\nconst createButtonActiveGesture = (el, isButton) => {\n  let currentTouchedButton;\n  let initialTouchedButton;\n  const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n    if (typeof document === 'undefined') {\n      return;\n    }\n    const target = document.elementFromPoint(x, y);\n    if (!target || !isButton(target)) {\n      clearActiveButton();\n      return;\n    }\n    if (target !== currentTouchedButton) {\n      clearActiveButton();\n      setActiveButton(target, hapticFeedbackFn);\n    }\n  };\n  const setActiveButton = (button, hapticFeedbackFn) => {\n    currentTouchedButton = button;\n    if (!initialTouchedButton) {\n      initialTouchedButton = currentTouchedButton;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.add('ion-activated'));\n    hapticFeedbackFn();\n  };\n  const clearActiveButton = (dispatchClick = false) => {\n    if (!currentTouchedButton) {\n      return;\n    }\n    const buttonToModify = currentTouchedButton;\n    writeTask(() => buttonToModify.classList.remove('ion-activated'));\n    /**\n     * Clicking on one button, but releasing on another button\n     * does not dispatch a click event in browsers, so we\n     * need to do it manually here. Some browsers will\n     * dispatch a click if clicking on one button, dragging over\n     * another button, and releasing on the original button. In that\n     * case, we need to make sure we do not cause a double click there.\n     */\n    if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n      currentTouchedButton.click();\n    }\n    currentTouchedButton = undefined;\n  };\n  return createGesture({\n    el,\n    gestureName: 'buttonActiveDrag',\n    threshold: 0,\n    onStart: (ev) => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n    onMove: (ev) => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n    onEnd: () => {\n      clearActiveButton(true);\n      hapticSelectionEnd();\n      initialTouchedButton = undefined;\n    },\n  });\n};\n\nexport { createButtonActiveGesture as c };\n"]},"metadata":{},"sourceType":"module"}