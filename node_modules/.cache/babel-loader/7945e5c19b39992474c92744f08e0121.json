{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n\n/**\n * When hardwareBackButton: false in config,\n * we need to make sure we also block the default\n * webview behavior. If we don't then it will be\n * possible for users to navigate backward while\n * an overlay is still open. Additionally, it will\n * give the appearance that the hardwareBackButton\n * config is not working as the page transition\n * will still happen.\n */\nvar blockHardwareBackButton = function blockHardwareBackButton() {\n  document.addEventListener('backbutton', function () {}); // eslint-disable-line\n};\n\nvar startHardwareBackButton = function startHardwareBackButton() {\n  var doc = document;\n  var busy = false;\n  doc.addEventListener('backbutton', function () {\n    if (busy) {\n      return;\n    }\n\n    var index = 0;\n    var handlers = [];\n    var ev = new CustomEvent('ionBackButton', {\n      bubbles: false,\n      detail: {\n        register: function register(priority, handler) {\n          handlers.push({\n            priority: priority,\n            handler: handler,\n            id: index++\n          });\n        }\n      }\n    });\n    doc.dispatchEvent(ev);\n\n    var executeAction = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(handlerRegister) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n\n                if (!(handlerRegister === null || handlerRegister === void 0 ? void 0 : handlerRegister.handler)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                result = handlerRegister.handler(processHandlers);\n\n                if (!(result != null)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 6;\n                return result;\n\n              case 6:\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(_context.t0);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n\n      return function executeAction(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    var processHandlers = function processHandlers() {\n      if (handlers.length > 0) {\n        var selectedHandler = {\n          priority: Number.MIN_SAFE_INTEGER,\n          handler: function handler() {\n            return undefined;\n          },\n          id: -1\n        };\n        handlers.forEach(function (handler) {\n          if (handler.priority >= selectedHandler.priority) {\n            selectedHandler = handler;\n          }\n        });\n        busy = true;\n        handlers = handlers.filter(function (handler) {\n          return handler.id !== selectedHandler.id;\n        });\n        executeAction(selectedHandler).then(function () {\n          return busy = false;\n        });\n      }\n    };\n\n    processHandlers();\n  });\n};\n\nvar OVERLAY_BACK_BUTTON_PRIORITY = 100;\nvar MENU_BACK_BUTTON_PRIORITY = 99; // 1 less than overlay priority since menu is displayed behind overlays\n\nexport { MENU_BACK_BUTTON_PRIORITY, OVERLAY_BACK_BUTTON_PRIORITY, blockHardwareBackButton, startHardwareBackButton };","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@ionic/core/components/hardware-back-button.js"],"names":["blockHardwareBackButton","document","addEventListener","startHardwareBackButton","doc","busy","index","handlers","ev","CustomEvent","bubbles","detail","register","priority","handler","push","id","dispatchEvent","executeAction","handlerRegister","result","processHandlers","console","error","length","selectedHandler","Number","MIN_SAFE_INTEGER","undefined","forEach","filter","then","OVERLAY_BACK_BUTTON_PRIORITY","MENU_BACK_BUTTON_PRIORITY"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * When hardwareBackButton: false in config,\n * we need to make sure we also block the default\n * webview behavior. If we don't then it will be\n * possible for users to navigate backward while\n * an overlay is still open. Additionally, it will\n * give the appearance that the hardwareBackButton\n * config is not working as the page transition\n * will still happen.\n */\nconst blockHardwareBackButton = () => {\n  document.addEventListener('backbutton', () => { }); // eslint-disable-line\n};\nconst startHardwareBackButton = () => {\n  const doc = document;\n  let busy = false;\n  doc.addEventListener('backbutton', () => {\n    if (busy) {\n      return;\n    }\n    let index = 0;\n    let handlers = [];\n    const ev = new CustomEvent('ionBackButton', {\n      bubbles: false,\n      detail: {\n        register(priority, handler) {\n          handlers.push({ priority, handler, id: index++ });\n        },\n      },\n    });\n    doc.dispatchEvent(ev);\n    const executeAction = async (handlerRegister) => {\n      try {\n        if (handlerRegister === null || handlerRegister === void 0 ? void 0 : handlerRegister.handler) {\n          const result = handlerRegister.handler(processHandlers);\n          if (result != null) {\n            await result;\n          }\n        }\n      }\n      catch (e) {\n        console.error(e);\n      }\n    };\n    const processHandlers = () => {\n      if (handlers.length > 0) {\n        let selectedHandler = {\n          priority: Number.MIN_SAFE_INTEGER,\n          handler: () => undefined,\n          id: -1,\n        };\n        handlers.forEach((handler) => {\n          if (handler.priority >= selectedHandler.priority) {\n            selectedHandler = handler;\n          }\n        });\n        busy = true;\n        handlers = handlers.filter((handler) => handler.id !== selectedHandler.id);\n        executeAction(selectedHandler).then(() => (busy = false));\n      }\n    };\n    processHandlers();\n  });\n};\nconst OVERLAY_BACK_BUTTON_PRIORITY = 100;\nconst MENU_BACK_BUTTON_PRIORITY = 99; // 1 less than overlay priority since menu is displayed behind overlays\n\nexport { MENU_BACK_BUTTON_PRIORITY, OVERLAY_BACK_BUTTON_PRIORITY, blockHardwareBackButton, startHardwareBackButton };\n"]},"metadata":{},"sourceType":"module"}