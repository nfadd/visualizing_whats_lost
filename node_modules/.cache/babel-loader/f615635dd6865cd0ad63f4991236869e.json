{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Build } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config } from './ionic-global.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { n as assert, s as shallowEqualStringMap } from './helpers.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index4.js';\nimport { a as attachComponent } from './framework-delegate.js';\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\n\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n\n\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      } else {\n        element.remove();\n      }\n    }\n\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n\n}\n\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n\n  if (view.component !== id) {\n    return false;\n  }\n\n  return shallowEqualStringMap(view.params, params);\n};\n\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n\n  if (page instanceof ViewController) {\n    return page;\n  }\n\n  return new ViewController(page, params);\n};\n\nconst convertToViews = pages => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\nconst Nav = /*@__PURE__*/proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n\n    this.__registerHost();\n\n    this.__attachShadow();\n\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n\n    this.animated = true;\n  }\n\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n\n  rootChanged() {\n    const isDev = Build.isDev;\n\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      } else if (isDev) {\n        console.warn('<ion-nav> does not support a root attribute when using ion-router.');\n      }\n    }\n  }\n\n  componentWillLoad() {\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n\n    this.ionNavWillLoad.emit();\n  }\n\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n\n      view._destroy();\n    } // Release swipe back gesture and transition.\n\n\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n\n    this.transInstr.length = 0;\n    this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  push(component, componentProps, opts, done) {\n    return this.insert(-1, component, componentProps, opts, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.insertPages(insertIndex, [{\n      component,\n      componentProps\n    }], opts, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  pop(opts, done) {\n    return this.removeIndex(-1, 1, opts, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  popTo(indexOrViewCtrl, opts, done) {\n    const ti = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      ti.removeView = indexOrViewCtrl;\n      ti.removeStart = 1;\n    } else if (typeof indexOrViewCtrl === 'number') {\n      ti.removeStart = indexOrViewCtrl + 1;\n    }\n\n    return this.queueTrns(ti, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  popToRoot(opts, done) {\n    return this.removeIndex(1, -1, opts, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  removeIndex(startIndex) {\n    let removeCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let opts = arguments.length > 2 ? arguments[2] : undefined;\n    let done = arguments.length > 3 ? arguments[3] : undefined;\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{\n      component,\n      componentProps\n    }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  setPages(views, opts, done) {\n    opts !== null && opts !== void 0 ? opts : opts = {}; // if animation wasn't set to true then default it to NOT animate\n\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Called by the router to update the view.\n   *\n   * @param id The component tag.\n   * @param params The component params.\n   * @param direction A direction hint.\n   * @param animation an AnimationBuilder.\n   *\n   * @return the status.\n   * @internal\n   */\n\n\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n\n    let resolve;\n    const promise = new Promise(r => resolve = r);\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => mark = r);\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          }\n        });\n        return p;\n      }\n    };\n\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    } else {\n      // Look for a view matching the target in the view stack.\n      const viewController = this.views.find(v => matches(v, id, params));\n\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animationBuilder: animation\n        }));\n      } else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n          animationBuilder: animation\n        }));\n      } else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animated: true,\n          animationBuilder: animation\n        }));\n      }\n    }\n\n    return promise;\n  }\n  /**\n   * Called by <ion-router> to retrieve the current component.\n   *\n   * @internal\n   */\n\n\n  async getRouteId() {\n    const active = this.getActiveSync();\n\n    if (active) {\n      return {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element\n      };\n    }\n\n    return undefined;\n  }\n  /**\n   * Get the active view.\n   */\n\n\n  async getActive() {\n    return this.getActiveSync();\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n\n\n  async getByIndex(index) {\n    return this.views[index];\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n\n\n  async canGoBack(view) {\n    return this.canGoBackSync(view);\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n\n\n  async getPrevious(view) {\n    return this.getPreviousSync(view);\n  }\n\n  getLength() {\n    return this.views.length;\n  }\n\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n\n  canGoBackSync() {\n    let view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n    return !!(view && this.getPreviousSync(view));\n  }\n\n  getPreviousSync() {\n    let view = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getActiveSync();\n\n    if (!view) {\n      return undefined;\n    }\n\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  /**\n   * Adds a navigation stack change to the queue and schedules it to run.\n   *\n   * @returns Whether the transition succeeds.\n   */\n\n\n  async queueTrns(ti, done) {\n    var _a, _b;\n\n    if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n      return false;\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n\n      if (router) {\n        const canTransition = await router.canTransition();\n\n        if (canTransition === false) {\n          return false;\n        }\n\n        if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return false;\n        }\n      }\n    } // Normalize empty\n\n\n    if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n      ti.insertViews = undefined;\n    } // Enqueue transition instruction\n\n\n    this.transInstr.push(ti); // if there isn't a transition already happening\n    // then this will kick off this transition\n\n    this.nextTrns();\n    return promise;\n  }\n\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n\n    ti.resolve(result.hasCompleted);\n\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    } else {\n      ti.resolve(false);\n    }\n  }\n  /**\n   * Consumes the next transition in the queue.\n   *\n   * @returns whether the transition is executed.\n   */\n\n\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    } // there is no transition happening right now, executes the next instructions.\n\n\n    const ti = this.transInstr.shift();\n\n    if (!ti) {\n      return false;\n    }\n\n    this.runTransition(ti);\n    return true;\n  }\n  /** Executes all the transition instruction from the queue. */\n\n\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n\n      this.postViewInit(enteringView, leavingView, ti); // Needs transition?\n\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n        }\n\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n\n      let result;\n\n      if (requiresTransition) {\n        result = await this.transition(enteringView, leavingView, ti);\n      } else {\n        // transition is not required, so we are already done!\n        // they're inserting/removing the views somewhere in the middle or\n        // beginning, so visually nothing needs to animate/transition\n        // resolve immediately because there's no animation that's happening\n        result = {\n          hasCompleted: true,\n          requiresTransition: false\n        };\n      }\n\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    } catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n\n  prepareTI(ti) {\n    var _a, _b;\n\n    var _c;\n\n    const viewsLength = this.views.length;\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : ti.opts = {};\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : _c.delegate = this.delegate;\n\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n\n      ti.removeStart += index;\n    }\n\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n\n    const insertViews = ti.insertViews;\n\n    if (!insertViews) {\n      return;\n    }\n\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    } // Check all the inserted view are correct\n\n\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n\n    ti.insertViews = viewControllers;\n  }\n  /**\n   * Returns the view that will be entered considering the transition instructions.\n   *\n   * @param ti The instructions.\n   * @param leavingView The view being left or undefined if none.\n   *\n   * @returns The view that will be entered, undefined if none.\n   */\n\n\n  getEnteringView(ti, leavingView) {\n    // The last inserted view will be entered when view are inserted.\n    const insertViews = ti.insertViews;\n\n    if (insertViews !== undefined) {\n      return insertViews[insertViews.length - 1];\n    } // When views are deleted, we will enter the last view that is not removed and not the view being left.\n\n\n    const removeStart = ti.removeStart;\n\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Adds and Removes the views from the navigation stack.\n   *\n   * @param enteringView The view being entered.\n   * @param leavingView The view being left.\n   * @param ti The instructions.\n   */\n\n\n  postViewInit(enteringView, leavingView, ti) {\n    var _a, _b, _c;\n\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid'); // Compute the views to remove.\n\n    const opts = ti.opts;\n    const {\n      insertViews,\n      removeStart,\n      removeCount\n    } = ti;\n    /** Records the view to destroy */\n\n    let destroyQueue; // there are views to remove\n\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\n        const view = this.views[i];\n\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      } // default the direction to \"back\"\n\n\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : opts.direction = 'back';\n    }\n\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n    assert(finalNumViews >= 0, 'final balance can not be negative');\n\n    if (finalNumViews === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    } // At this point the transition can not be rejected, any throw should be an error\n    // Insert the new views in the stack.\n\n\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : opts.direction = 'forward';\n      }\n    } // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n\n\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      } // once all lifecycle events has been delivered, we can safely detroy the views\n\n\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation ? ani => this.sbAni = ani : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({\n      mode,\n      showGoBack: this.canGoBackSync(enteringView),\n      baseEl: this.el,\n      progressCallback,\n      animated: this.animated && config.getBoolean('animated', true),\n      enteringEl,\n      leavingEl\n    }, opts), {\n      animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation')\n    });\n    const {\n      hasCompleted\n    } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n  /**\n   * Inserts a view at the specified index.\n   *\n   * When the view already is in the stack it will be moved to the new position.\n   *\n   * @param view The view to insert.\n   * @param index The index where to insert the view.\n   */\n\n\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n\n    if (existingIndex > -1) {\n      assert(view.nav === this, 'view is not part of the nav'); // The view already in the stack, removes it.\n\n      views.splice(existingIndex, 1); // and add it back at the requested index.\n\n      views.splice(index, 0, view);\n    } else {\n      assert(!view.nav, 'nav is used'); // this is a new view to add to the stack\n      // create the new entering view\n\n      view.nav = this;\n      views.splice(index, 0, view);\n    }\n  }\n  /**\n   * Removes a view from the stack.\n   *\n   * @param view The view to remove.\n   */\n\n\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n\n  destroyView(view) {\n    view._destroy();\n\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n\n\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n\n      const element = view.element;\n\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        } else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n\n  canStart() {\n    return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();\n  }\n\n  onStart() {\n    this.pop({\n      direction: 'back',\n      progressAnimation: true\n    });\n  }\n\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, {\n        oneTimeCallback: true\n      }); // Account for rounding errors in JS\n\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      } else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n\n  render() {\n    return h(\"slot\", null);\n  }\n\n  get el() {\n    return this;\n  }\n\n  static get watchers() {\n    return {\n      \"swipeGesture\": [\"swipeGestureChanged\"],\n      \"root\": [\"rootChanged\"]\n    };\n  }\n\n  static get style() {\n    return navCss;\n  }\n\n}, [1, \"ion-nav\", {\n  \"delegate\": [16],\n  \"swipeGesture\": [1028, \"swipe-gesture\"],\n  \"animated\": [4],\n  \"animation\": [16],\n  \"rootParams\": [16],\n  \"root\": [1],\n  \"push\": [64],\n  \"insert\": [64],\n  \"insertPages\": [64],\n  \"pop\": [64],\n  \"popTo\": [64],\n  \"popToRoot\": [64],\n  \"removeIndex\": [64],\n  \"setRoot\": [64],\n  \"setPages\": [64],\n  \"setRouteId\": [64],\n  \"getRouteId\": [64],\n  \"getActive\": [64],\n  \"getByIndex\": [64],\n  \"canGoBack\": [64],\n  \"getPrevious\": [64]\n}]);\n\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n\n  const components = [\"ion-nav\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-nav\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Nav);\n        }\n\n        break;\n    }\n  });\n}\n\nconst IonNav = Nav;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonNav, defineCustomElement };","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/@ionic/core/components/ion-nav.js"],"names":["proxyCustomElement","HTMLElement","createEvent","h","Build","b","getIonMode","c","config","g","getTimeGivenProgression","n","assert","s","shallowEqualStringMap","l","lifecycle","t","transition","setPageHidden","d","LIFECYCLE_WILL_UNLOAD","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","constructor","component","params","state","init","container","element","delegate","_destroy","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","convertToView","page","convertToViews","pages","map","componentProps","filter","v","navCss","Nav","__registerHost","__attachShadow","ionNavWillLoad","ionNavWillChange","ionNavDidChange","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","swipeGestureChanged","gesture","enable","swipeGesture","rootChanged","isDev","root","setRoot","rootParams","console","warn","componentWillLoad","document","querySelector","el","closest","mode","getBoolean","emit","componentDidLoad","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","disconnectedCallback","destroy","length","push","opts","done","insert","insertIndex","insertPages","insertComponents","queueTrns","insertStart","insertViews","pop","removeIndex","popTo","indexOrViewCtrl","ti","removeStart","removeCount","removeView","popToRoot","startIndex","setPages","setRouteId","direction","animation","active","getActiveSync","Promise","resolve","changed","promise","r","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","Object","assign","animationBuilder","getRouteId","tagName","getActive","getByIndex","index","canGoBack","canGoBackSync","getPrevious","getPreviousSync","getLength","indexOf","_a","_b","skipIfBusy","reject","router","canTransition","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","navChanged","failed","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","isBackDirection","_c","viewsLength","viewControllers","removeEnd","i","destroyQueue","finalNumViews","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","render","watchers","style","defineCustomElement$1","customElements","components","forEach","define","IonNav","defineCustomElement"],"mappings":"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","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, createEvent, h, Build } from '@stencil/core/internal/client';\nimport { b as getIonMode, c as config } from './ionic-global.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier.js';\nimport { n as assert, s as shallowEqualStringMap } from './helpers.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index4.js';\nimport { a as attachComponent } from './framework-delegate.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      }\n      else {\n        element.remove();\n      }\n    }\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n}\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n  if (view.component !== id) {\n    return false;\n  }\n  return shallowEqualStringMap(view.params, params);\n};\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n  if (page instanceof ViewController) {\n    return page;\n  }\n  return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n  return pages\n    .map((page) => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n    if ('component' in page) {\n      /**\n       * TODO Ionic 6:\n       * Consider switching to just using `undefined` here\n       * as well as on the public interfaces and on\n       * `NavComponentWithProps`. Previously `pages` was\n       * of type `any[]` so TypeScript did not catch this.\n       */\n      return convertToView(page.component, page.componentProps === null ? undefined : page.componentProps);\n    }\n    return convertToView(page, undefined);\n  })\n    .filter((v) => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n    this.animated = true;\n  }\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n  rootChanged() {\n    const isDev = Build.isDev;\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n      else if (isDev) {\n        console.warn('<ion-nav> does not support a root attribute when using ion-router.');\n      }\n    }\n  }\n  componentWillLoad() {\n    this.useRouter = document.querySelector('ion-router') !== null && this.el.closest('[no-router]') === null;\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n    this.ionNavWillLoad.emit();\n  }\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n  disconnectedCallback() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      view._destroy();\n    }\n    // Release swipe back gesture and transition.\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n    this.transInstr.length = 0;\n    this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  push(component, componentProps, opts, done) {\n    return this.insert(-1, component, componentProps, opts, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.insertPages(insertIndex, [{ component, componentProps }], opts, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts,\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  pop(opts, done) {\n    return this.removeIndex(-1, 1, opts, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popTo(indexOrViewCtrl, opts, done) {\n    const ti = {\n      removeStart: -1,\n      removeCount: -1,\n      opts,\n    };\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      ti.removeView = indexOrViewCtrl;\n      ti.removeStart = 1;\n    }\n    else if (typeof indexOrViewCtrl === 'number') {\n      ti.removeStart = indexOrViewCtrl + 1;\n    }\n    return this.queueTrns(ti, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  popToRoot(opts, done) {\n    return this.removeIndex(1, -1, opts, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts,\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{ component, componentProps }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n  setPages(views, opts, done) {\n    opts !== null && opts !== void 0 ? opts : (opts = {});\n    // if animation wasn't set to true then default it to NOT animate\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts,\n    }, done);\n  }\n  /**\n   * Called by the router to update the view.\n   *\n   * @param id The component tag.\n   * @param params The component params.\n   * @param direction A direction hint.\n   * @param animation an AnimationBuilder.\n   *\n   * @return the status.\n   * @internal\n   */\n  setRouteId(id, params, direction, animation) {\n    const active = this.getActiveSync();\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element,\n      });\n    }\n    let resolve;\n    const promise = new Promise((r) => (resolve = r));\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: (enteringEl) => {\n        let mark;\n        const p = new Promise((r) => (mark = r));\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          },\n        });\n        return p;\n      },\n    };\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    }\n    else {\n      // Look for a view matching the target in the view stack.\n      const viewController = this.views.find((v) => matches(v, id, params));\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n      }\n      else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n      }\n      else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n      }\n    }\n    return promise;\n  }\n  /**\n   * Called by <ion-router> to retrieve the current component.\n   *\n   * @internal\n   */\n  async getRouteId() {\n    const active = this.getActiveSync();\n    if (active) {\n      return {\n        id: active.element.tagName,\n        params: active.params,\n        element: active.element,\n      };\n    }\n    return undefined;\n  }\n  /**\n   * Get the active view.\n   */\n  async getActive() {\n    return this.getActiveSync();\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n  async getByIndex(index) {\n    return this.views[index];\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n  async canGoBack(view) {\n    return this.canGoBackSync(view);\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n  async getPrevious(view) {\n    return this.getPreviousSync(view);\n  }\n  getLength() {\n    return this.views.length;\n  }\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }\n  /**\n   * Adds a navigation stack change to the queue and schedules it to run.\n   *\n   * @returns Whether the transition succeeds.\n   */\n  async queueTrns(ti, done) {\n    var _a, _b;\n    if (this.isTransitioning && ((_a = ti.opts) === null || _a === void 0 ? void 0 : _a.skipIfBusy)) {\n      return false;\n    }\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done;\n    /**\n     * If using router, check to see if navigation hooks\n     * will allow us to perform this transition. This\n     * is required in order for hooks to work with\n     * the ion-back-button or swipe to go back.\n     */\n    if (ti.opts && ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const canTransition = await router.canTransition();\n        if (canTransition === false) {\n          return false;\n        }\n        if (typeof canTransition === 'string') {\n          router.push(canTransition, ti.opts.direction || 'back');\n          return false;\n        }\n      }\n    }\n    // Normalize empty\n    if (((_b = ti.insertViews) === null || _b === void 0 ? void 0 : _b.length) === 0) {\n      ti.insertViews = undefined;\n    }\n    // Enqueue transition instruction\n    this.transInstr.push(ti);\n    // if there isn't a transition already happening\n    // then this will kick off this transition\n    this.nextTrns();\n    return promise;\n  }\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n    ti.resolve(result.hasCompleted);\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    }\n    else {\n      ti.resolve(false);\n    }\n  }\n  /**\n   * Consumes the next transition in the queue.\n   *\n   * @returns whether the transition is executed.\n   */\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    }\n    // there is no transition happening right now, executes the next instructions.\n    const ti = this.transInstr.shift();\n    if (!ti) {\n      return false;\n    }\n    this.runTransition(ti);\n    return true;\n  }\n  /** Executes all the transition instruction from the queue. */\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n      this.postViewInit(enteringView, leavingView, ti);\n      // Needs transition?\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n      if (requiresTransition && ti.opts && leavingView) {\n        const isBackDirection = ti.opts.direction === 'back';\n        /**\n         * If heading back, use the entering page's animation\n         * unless otherwise specified by the developer.\n         */\n        if (isBackDirection) {\n          ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView === null || enteringView === void 0 ? void 0 : enteringView.animationBuilder);\n        }\n        leavingView.animationBuilder = ti.opts.animationBuilder;\n      }\n      let result;\n      if (requiresTransition) {\n        result = await this.transition(enteringView, leavingView, ti);\n      }\n      else {\n        // transition is not required, so we are already done!\n        // they're inserting/removing the views somewhere in the middle or\n        // beginning, so visually nothing needs to animate/transition\n        // resolve immediately because there's no animation that's happening\n        result = {\n          hasCompleted: true,\n          requiresTransition: false,\n        };\n      }\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    }\n    catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n  prepareTI(ti) {\n    var _a, _b;\n    var _c;\n    const viewsLength = this.views.length;\n    (_a = ti.opts) !== null && _a !== void 0 ? _a : (ti.opts = {});\n    (_b = (_c = ti.opts).delegate) !== null && _b !== void 0 ? _b : (_c.delegate = this.delegate);\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n      ti.removeStart += index;\n    }\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n    const insertViews = ti.insertViews;\n    if (!insertViews) {\n      return;\n    }\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    }\n    // Check all the inserted view are correct\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n    ti.insertViews = viewControllers;\n  }\n  /**\n   * Returns the view that will be entered considering the transition instructions.\n   *\n   * @param ti The instructions.\n   * @param leavingView The view being left or undefined if none.\n   *\n   * @returns The view that will be entered, undefined if none.\n   */\n  getEnteringView(ti, leavingView) {\n    // The last inserted view will be entered when view are inserted.\n    const insertViews = ti.insertViews;\n    if (insertViews !== undefined) {\n      return insertViews[insertViews.length - 1];\n    }\n    // When views are deleted, we will enter the last view that is not removed and not the view being left.\n    const removeStart = ti.removeStart;\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n    return undefined;\n  }\n  /**\n   * Adds and Removes the views from the navigation stack.\n   *\n   * @param enteringView The view being entered.\n   * @param leavingView The view being left.\n   * @param ti The instructions.\n   */\n  postViewInit(enteringView, leavingView, ti) {\n    var _a, _b, _c;\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    // Compute the views to remove.\n    const opts = ti.opts;\n    const { insertViews, removeStart, removeCount } = ti;\n    /** Records the view to destroy */\n    let destroyQueue;\n    // there are views to remove\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n      for (let i = removeStart; i < removeStart + removeCount; i++) {\n        const view = this.views[i];\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      }\n      // default the direction to \"back\"\n      (_a = opts.direction) !== null && _a !== void 0 ? _a : (opts.direction = 'back');\n    }\n    const finalNumViews = this.views.length + ((_b = insertViews === null || insertViews === void 0 ? void 0 : insertViews.length) !== null && _b !== void 0 ? _b : 0) - (removeCount !== null && removeCount !== void 0 ? removeCount : 0);\n    assert(finalNumViews >= 0, 'final balance can not be negative');\n    if (finalNumViews === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    }\n    // At this point the transition can not be rejected, any throw should be an error\n    // Insert the new views in the stack.\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        (_c = opts.direction) !== null && _c !== void 0 ? _c : (opts.direction = 'forward');\n      }\n    }\n    // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      }\n      // once all lifecycle events has been delivered, we can safely detroy the views\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation ? (ani) => (this.sbAni = ani) : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign(Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n      leavingEl }, opts), { animationBuilder: opts.animationBuilder || this.animation || config.get('navAnimation') });\n    const { hasCompleted } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction,\n    };\n  }\n  /**\n   * Inserts a view at the specified index.\n   *\n   * When the view already is in the stack it will be moved to the new position.\n   *\n   * @param view The view to insert.\n   * @param index The index where to insert the view.\n   */\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n    if (existingIndex > -1) {\n      assert(view.nav === this, 'view is not part of the nav');\n      // The view already in the stack, removes it.\n      views.splice(existingIndex, 1);\n      // and add it back at the requested index.\n      views.splice(index, 0, view);\n    }\n    else {\n      assert(!view.nav, 'nav is used');\n      // this is a new view to add to the stack\n      // create the new entering view\n      view.nav = this;\n      views.splice(index, 0, view);\n    }\n  }\n  /**\n   * Removes a view from the stack.\n   *\n   * @param view The view to remove.\n   */\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n  destroyView(view) {\n    view._destroy();\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      /**\n       * When inserting multiple views via insertPages\n       * the last page will be transitioned to, but the\n       * others will not be. As a result, a DOM element\n       * will only be created for the last page inserted.\n       * As a result, it is possible to have views in the\n       * stack that do not have `view.element` yet.\n       */\n      const element = view.element;\n      if (element) {\n        if (i > activeViewIndex) {\n          // this view comes after the active view\n          // let's unload it\n          lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n          this.destroyView(view);\n        }\n        else if (i < activeViewIndex) {\n          // this view comes before the active view\n          // and it is not a portal then ensure it is hidden\n          setPageHidden(element, true);\n        }\n      }\n    }\n  }\n  canStart() {\n    return (!!this.swipeGesture &&\n      !this.isTransitioning &&\n      this.transInstr.length === 0 &&\n      this.animationEnabled &&\n      this.canGoBackSync());\n  }\n  onStart() {\n    this.pop({ direction: 'back', progressAnimation: true });\n  }\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, { oneTimeCallback: true });\n      // Account for rounding errors in JS\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      }\n      else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  get el() { return this; }\n  static get watchers() { return {\n    \"swipeGesture\": [\"swipeGestureChanged\"],\n    \"root\": [\"rootChanged\"]\n  }; }\n  static get style() { return navCss; }\n}, [1, \"ion-nav\", {\n    \"delegate\": [16],\n    \"swipeGesture\": [1028, \"swipe-gesture\"],\n    \"animated\": [4],\n    \"animation\": [16],\n    \"rootParams\": [16],\n    \"root\": [1],\n    \"push\": [64],\n    \"insert\": [64],\n    \"insertPages\": [64],\n    \"pop\": [64],\n    \"popTo\": [64],\n    \"popToRoot\": [64],\n    \"removeIndex\": [64],\n    \"setRoot\": [64],\n    \"setPages\": [64],\n    \"setRouteId\": [64],\n    \"getRouteId\": [64],\n    \"getActive\": [64],\n    \"getByIndex\": [64],\n    \"canGoBack\": [64],\n    \"getPrevious\": [64]\n  }]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-nav\"];\n  components.forEach(tagName => { switch (tagName) {\n    case \"ion-nav\":\n      if (!customElements.get(tagName)) {\n        customElements.define(tagName, Nav);\n      }\n      break;\n  } });\n}\n\nconst IonNav = Nav;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonNav, defineCustomElement };\n"]},"metadata":{},"sourceType":"module"}