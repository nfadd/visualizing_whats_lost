{"ast":null,"code":"/*\nfunction Camera() {\n    return(\n        <div className='camera'>\n            <label>\n                <input  id=\"camera\"\n                        style={{display: 'none'}}\n                        type=\"file\" \n                        accept=\"image/*\"\n                        capture=\"camera\"\n                        onChange={readURL(this)}\n                />\n                Camera\n            </label>\n        </div>\n    );\n}\n\nfunction saveImage() {\n    const input = document.getElementById('camera');\n\n    if (input != null){\n        input.onchange = (function(e) {\n            const file = e.path[0].files[0];\n            var image = document.createElement('img');\n            const reader = new FileReader();\n\n            reader.onload = function(event) {\n                image.src = event.target.result;\n            };\n\n            reader.readAsDataURL(file);\n            document.getElementById(\"popup\").appendChild(image);\n        });\n    }\n}\n\nfunction readURL(input){\n    var image = document.createElement('img');\n\n    //console.log(input);\n    \n    if (input !== undefined) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n            image.src = e.target.result;\n        }\n       \n        reader.readAsDataURL(input.files[0]);\n        document.getElementById(\"popup\").appendChild(image);\n    }\n}\n\n*/\n\n/*\nfunction CameraContainer() {\n    return (\n        <div>\n            <button id=\"camera\">Camera</button>\n            <video autoplay></video>\n            <script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n        </div>\n    )\n}\n\nfunction CameraOnClick() {\n    document.querySelector('#camera').addEventListener('click', async function init(e) {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            audio: false,\n            video: true\n          })\n          const videoTracks = stream.getVideoTracks()\n          const track = videoTracks[0]\n          alert(`Getting video from: ${track.label}`)\n          document.querySelector('video').srcObject = stream\n          document.querySelector('#camera').setAttribute('hidden', true)\n        } catch (error) {\n          alert(`${error.name}`)\n          console.error(error)\n        }\n    })\n}\n\nvar takePhotoButton = document.querySelector('button#takePhoto');\nvar canvas = document.querySelector('canvas');\n\ntakePhotoButton.onclick = takePhoto;\n\n// Get a Blob from the currently selected camera source and\n// display this with an img element.\nfunction takePhoto() {\n  imageCapture.takePhoto().then(function(blob) {\n    console.log('Took photo:', blob);\n    img.classList.remove('hidden');\n    img.src = URL.createObjectURL(blob);\n  }).catch(function(error) {\n    console.log('takePhoto() error: ', error);\n  });\n}\n\nexport default Camera\n*/\n//const Camera = () => {\n// The width and height of the captured photo. We will set the\n// width to the value defined here, but the height will be\n// calculated based on the aspect ratio of the input stream.\nvar width = 320; // We will scale the photo width to this\n\nvar height = 0; // This will be computed based on the input stream\n// |streaming| indicates whether or not we're currently streaming\n// video from the camera. Obviously, we start at false.\n\nvar streaming = false; // The various HTML elements we need to configure or control. These\n// will be set by the startup() function.\n\nvar video = null;\nvar canvas = null;\nvar photo = null;\nvar startbutton = null;\n\nfunction startup() {\n  video = document.getElementById(\"video\");\n  canvas = document.createElement(\"canvas\");\n  photo = document.getElementById(\"photo\");\n  startbutton = document.getElementById(\"startbutton\");\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: false\n  }).then(function (stream) {\n    video.srcObject = stream;\n    video.play();\n  }).catch(function (err) {\n    console.log(\"An error occurred: \" + err);\n  });\n  video.addEventListener('canplay', function (ev) {\n    if (!streaming) {\n      height = video.videoHeight / (video.videoWidth / width); // Firefox currently has a bug where the height can't be read from\n      // the video, so we will make assumptions if this happens.\n\n      if (isNaN(height)) {\n        height = width / (4 / 3);\n      }\n\n      video.setAttribute('width', width);\n      video.setAttribute('height', height);\n      canvas.setAttribute('width', width);\n      canvas.setAttribute('height', height);\n      streaming = true;\n    }\n  }, false);\n  startbutton.addEventListener('click', function (ev) {\n    takepicture();\n    ev.preventDefault();\n  }, false);\n  clearphoto();\n} // Fill the photo with an indication that none has been\n// captured.\n\n\nfunction clearphoto() {\n  var context = canvas.getContext('2d');\n  context.fillStyle = \"#AAA\";\n  context.fillRect(0, 0, canvas.width, canvas.height);\n  var data = canvas.toDataURL('image/png');\n  photo.setAttribute('src', data);\n} // Capture a photo by fetching the current contents of the video\n// and drawing it into a canvas, then converting that to a PNG\n// format data URL. By drawing it on an offscreen canvas and then\n// drawing that to the screen, we can change its size and/or apply\n// other changes before drawing it.\n\n\nfunction takepicture() {\n  var context = canvas.getContext('2d');\n\n  if (width && height) {\n    canvas.width = width;\n    canvas.height = height;\n    context.drawImage(video, 0, 0, width, height);\n    var data = canvas.toDataURL('image/png');\n    photo.setAttribute('src', data);\n  } else {\n    clearphoto();\n  }\n} // Set up our event listener to run the startup process\n// once loading is complete.\n//window.addEventListener('load', startup, false);\n//};\n\n\nexport default startup;","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/src/Camera.js"],"names":["width","height","streaming","video","canvas","photo","startbutton","startup","document","getElementById","createElement","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","catch","err","console","log","addEventListener","ev","videoHeight","videoWidth","isNaN","setAttribute","takepicture","preventDefault","clearphoto","context","getContext","fillStyle","fillRect","data","toDataURL","drawImage"],"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","sourcesContent":["/*\nfunction Camera() {\n    return(\n        <div className='camera'>\n            <label>\n                <input  id=\"camera\"\n                        style={{display: 'none'}}\n                        type=\"file\" \n                        accept=\"image/*\"\n                        capture=\"camera\"\n                        onChange={readURL(this)}\n                />\n                Camera\n            </label>\n        </div>\n    );\n}\n\nfunction saveImage() {\n    const input = document.getElementById('camera');\n\n    if (input != null){\n        input.onchange = (function(e) {\n            const file = e.path[0].files[0];\n            var image = document.createElement('img');\n            const reader = new FileReader();\n\n            reader.onload = function(event) {\n                image.src = event.target.result;\n            };\n\n            reader.readAsDataURL(file);\n            document.getElementById(\"popup\").appendChild(image);\n        });\n    }\n}\n\nfunction readURL(input){\n    var image = document.createElement('img');\n\n    //console.log(input);\n    \n    if (input !== undefined) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n            image.src = e.target.result;\n        }\n       \n        reader.readAsDataURL(input.files[0]);\n        document.getElementById(\"popup\").appendChild(image);\n    }\n}\n\n*/\n\n/*\nfunction CameraContainer() {\n    return (\n        <div>\n            <button id=\"camera\">Camera</button>\n            <video autoplay></video>\n            <script src=\"https://webrtc.github.io/adapter/adapter-latest.js\"></script>\n        </div>\n    )\n}\n\nfunction CameraOnClick() {\n    document.querySelector('#camera').addEventListener('click', async function init(e) {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            audio: false,\n            video: true\n          })\n          const videoTracks = stream.getVideoTracks()\n          const track = videoTracks[0]\n          alert(`Getting video from: ${track.label}`)\n          document.querySelector('video').srcObject = stream\n          document.querySelector('#camera').setAttribute('hidden', true)\n        } catch (error) {\n          alert(`${error.name}`)\n          console.error(error)\n        }\n    })\n}\n\nvar takePhotoButton = document.querySelector('button#takePhoto');\nvar canvas = document.querySelector('canvas');\n\ntakePhotoButton.onclick = takePhoto;\n\n// Get a Blob from the currently selected camera source and\n// display this with an img element.\nfunction takePhoto() {\n  imageCapture.takePhoto().then(function(blob) {\n    console.log('Took photo:', blob);\n    img.classList.remove('hidden');\n    img.src = URL.createObjectURL(blob);\n  }).catch(function(error) {\n    console.log('takePhoto() error: ', error);\n  });\n}\n\nexport default Camera\n*/\n\n\n//const Camera = () => {\n    // The width and height of the captured photo. We will set the\n    // width to the value defined here, but the height will be\n    // calculated based on the aspect ratio of the input stream.\n  \n    var width = 320;    // We will scale the photo width to this\n    var height = 0;     // This will be computed based on the input stream\n  \n    // |streaming| indicates whether or not we're currently streaming\n    // video from the camera. Obviously, we start at false.\n  \n    var streaming = false;\n  \n    // The various HTML elements we need to configure or control. These\n    // will be set by the startup() function.\n  \n    var video = null;\n    var canvas = null;\n    var photo = null;\n    var startbutton = null;\n  \n    function startup() {\n      video = document.getElementById(\"video\");\n      canvas = document.createElement(\"canvas\");\n      photo = document.getElementById(\"photo\");\n      startbutton = document.getElementById(\"startbutton\");\n  \n      navigator.mediaDevices.getUserMedia({video: true, audio: false})\n      .then(function(stream) {\n        video.srcObject = stream;\n        video.play();\n      })\n      .catch(function(err) {\n        console.log(\"An error occurred: \" + err);\n      });\n      \n      video.addEventListener('canplay', function(ev){\n        if (!streaming) {\n          height = video.videoHeight / (video.videoWidth/width);\n        \n          // Firefox currently has a bug where the height can't be read from\n          // the video, so we will make assumptions if this happens.\n        \n          if (isNaN(height)) {\n            height = width / (4/3);\n          }\n        \n          video.setAttribute('width', width);\n          video.setAttribute('height', height);\n          canvas.setAttribute('width', width);\n          canvas.setAttribute('height', height);\n          streaming = true;\n        }\n      }, false);\n  \n      startbutton.addEventListener('click', function(ev){\n        takepicture();\n        ev.preventDefault();\n      }, false);\n      \n      clearphoto();\n    }\n  \n    // Fill the photo with an indication that none has been\n    // captured.\n  \n    function clearphoto() {\n      var context = canvas.getContext('2d');\n      context.fillStyle = \"#AAA\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n  \n      var data = canvas.toDataURL('image/png');\n      photo.setAttribute('src', data);\n    }\n    \n    // Capture a photo by fetching the current contents of the video\n    // and drawing it into a canvas, then converting that to a PNG\n    // format data URL. By drawing it on an offscreen canvas and then\n    // drawing that to the screen, we can change its size and/or apply\n    // other changes before drawing it.\n  \n    function takepicture() {\n      var context = canvas.getContext('2d');\n      if (width && height) {\n        canvas.width = width;\n        canvas.height = height;\n        context.drawImage(video, 0, 0, width, height);\n      \n        var data = canvas.toDataURL('image/png');\n        photo.setAttribute('src', data);\n      } else {\n        clearphoto();\n      }\n    }\n  \n    // Set up our event listener to run the startup process\n    // once loading is complete.\n    //window.addEventListener('load', startup, false);\n  //};\n  \n  export default startup"]},"metadata":{},"sourceType":"module"}