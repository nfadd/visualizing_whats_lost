{"ast":null,"code":"import { getAssetPath } from '@stencil/core/internal/client';\nvar CACHED_MAP;\n\nvar getIconMap = function getIconMap() {\n  if (typeof window === 'undefined') {\n    return new Map();\n  } else {\n    if (!CACHED_MAP) {\n      var win = window;\n      win.Ionicons = win.Ionicons || {};\n      CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n    }\n\n    return CACHED_MAP;\n  }\n};\n\nvar addIcons = function addIcons(icons) {\n  var map = getIconMap();\n  Object.keys(icons).forEach(function (name) {\n    return map.set(name, icons[name]);\n  });\n};\n\nvar getUrl = function getUrl(i) {\n  var url = getSrc(i.src);\n\n  if (url) {\n    return url;\n  }\n\n  url = getName(i.name, i.icon, i.mode, i.ios, i.md);\n\n  if (url) {\n    return getNamedUrl(url);\n  }\n\n  if (i.icon) {\n    url = getSrc(i.icon);\n\n    if (url) {\n      return url;\n    }\n\n    url = getSrc(i.icon[i.mode]);\n\n    if (url) {\n      return url;\n    }\n  }\n\n  return null;\n};\n\nvar getNamedUrl = function getNamedUrl(iconName) {\n  var url = getIconMap().get(iconName);\n\n  if (url) {\n    return url;\n  }\n\n  return getAssetPath(\"svg/\".concat(iconName, \".svg\"));\n};\n\nvar getName = function getName(iconName, icon, mode, ios, md) {\n  // default to \"md\" if somehow the mode wasn't set\n  mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md'; // if an icon was passed in using the ios or md attributes\n  // set the iconName to whatever was passed in\n\n  if (ios && mode === 'ios') {\n    iconName = toLower(ios);\n  } else if (md && mode === 'md') {\n    iconName = toLower(md);\n  } else {\n    if (!iconName && icon && !isSrc(icon)) {\n      iconName = icon;\n    }\n\n    if (isStr(iconName)) {\n      iconName = toLower(iconName);\n    }\n  }\n\n  if (!isStr(iconName) || iconName.trim() === '') {\n    return null;\n  } // only allow alpha characters and dash\n\n\n  var invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n\n  if (invalidChars !== '') {\n    return null;\n  }\n\n  return iconName;\n};\n\nvar getSrc = function getSrc(src) {\n  if (isStr(src)) {\n    src = src.trim();\n\n    if (isSrc(src)) {\n      return src;\n    }\n  }\n\n  return null;\n};\n\nvar isSrc = function isSrc(str) {\n  return str.length > 0 && /(\\/|\\.)/.test(str);\n};\n\nvar isStr = function isStr(val) {\n  return typeof val === 'string';\n};\n\nvar toLower = function toLower(val) {\n  return val.toLowerCase();\n};\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\n\n\nvar inheritAttributes = function inheritAttributes(el) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var attributeObject = {};\n  attributes.forEach(function (attr) {\n    if (el.hasAttribute(attr)) {\n      var value = el.getAttribute(attr);\n\n      if (value !== null) {\n        attributeObject[attr] = el.getAttribute(attr);\n      }\n\n      el.removeAttribute(attr);\n    }\n  });\n  return attributeObject;\n};\n\nexport { addIcons as a, inheritAttributes as b, getName as c, getUrl as g, isStr as i };","map":{"version":3,"sources":["/Users/nickfaddis/Desktop/SLU/csCapstone/visualizing_whats_lost/react-capacitor-example/node_modules/ionicons/components/utils.js"],"names":["getAssetPath","CACHED_MAP","getIconMap","window","Map","win","Ionicons","map","addIcons","icons","Object","keys","forEach","name","set","getUrl","i","url","getSrc","src","getName","icon","mode","ios","md","getNamedUrl","iconName","get","toLower","isSrc","isStr","trim","invalidChars","replace","str","length","test","val","toLowerCase","inheritAttributes","el","attributes","attributeObject","attr","hasAttribute","value","getAttribute","removeAttribute","a","b","c","g"],"mappings":"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","sourcesContent":["import { getAssetPath } from '@stencil/core/internal/client';\n\nlet CACHED_MAP;\nconst getIconMap = () => {\n  if (typeof window === 'undefined') {\n    return new Map();\n  }\n  else {\n    if (!CACHED_MAP) {\n      const win = window;\n      win.Ionicons = win.Ionicons || {};\n      CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n    }\n    return CACHED_MAP;\n  }\n};\nconst addIcons = (icons) => {\n  const map = getIconMap();\n  Object.keys(icons).forEach(name => map.set(name, icons[name]));\n};\nconst getUrl = (i) => {\n  let url = getSrc(i.src);\n  if (url) {\n    return url;\n  }\n  url = getName(i.name, i.icon, i.mode, i.ios, i.md);\n  if (url) {\n    return getNamedUrl(url);\n  }\n  if (i.icon) {\n    url = getSrc(i.icon);\n    if (url) {\n      return url;\n    }\n    url = getSrc(i.icon[i.mode]);\n    if (url) {\n      return url;\n    }\n  }\n  return null;\n};\nconst getNamedUrl = (iconName) => {\n  const url = getIconMap().get(iconName);\n  if (url) {\n    return url;\n  }\n  return getAssetPath(`svg/${iconName}.svg`);\n};\nconst getName = (iconName, icon, mode, ios, md) => {\n  // default to \"md\" if somehow the mode wasn't set\n  mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md';\n  // if an icon was passed in using the ios or md attributes\n  // set the iconName to whatever was passed in\n  if (ios && mode === 'ios') {\n    iconName = toLower(ios);\n  }\n  else if (md && mode === 'md') {\n    iconName = toLower(md);\n  }\n  else {\n    if (!iconName && icon && !isSrc(icon)) {\n      iconName = icon;\n    }\n    if (isStr(iconName)) {\n      iconName = toLower(iconName);\n    }\n  }\n  if (!isStr(iconName) || iconName.trim() === '') {\n    return null;\n  }\n  // only allow alpha characters and dash\n  const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n  if (invalidChars !== '') {\n    return null;\n  }\n  return iconName;\n};\nconst getSrc = (src) => {\n  if (isStr(src)) {\n    src = src.trim();\n    if (isSrc(src)) {\n      return src;\n    }\n  }\n  return null;\n};\nconst isSrc = (str) => str.length > 0 && /(\\/|\\.)/.test(str);\nconst isStr = (val) => typeof val === 'string';\nconst toLower = (val) => val.toLowerCase();\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nconst inheritAttributes = (el, attributes = []) => {\n  const attributeObject = {};\n  attributes.forEach(attr => {\n    if (el.hasAttribute(attr)) {\n      const value = el.getAttribute(attr);\n      if (value !== null) {\n        attributeObject[attr] = el.getAttribute(attr);\n      }\n      el.removeAttribute(attr);\n    }\n  });\n  return attributeObject;\n};\n\nexport { addIcons as a, inheritAttributes as b, getName as c, getUrl as g, isStr as i };\n"]},"metadata":{},"sourceType":"module"}