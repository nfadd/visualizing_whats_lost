{"ast":null,"code":"import { WebPlugin } from \"@capacitor/core\";\nexport class CameraPreviewWeb extends WebPlugin {\n  constructor() {\n    super({\n      name: \"CameraPreview\",\n      platforms: [\"web\"]\n    });\n  }\n\n  async start(options) {\n    return new Promise(async (resolve, reject) => {\n      await navigator.mediaDevices.getUserMedia({\n        audio: !options.disableAudio,\n        video: true\n      }).then(stream => {\n        // Stop any existing stream so we can request media with different constraints based on user input\n        stream.getTracks().forEach(track => track.stop());\n      }).catch(error => {\n        reject(error);\n      });\n      const video = document.getElementById(\"video\");\n      const parent = document.getElementById(options.parent);\n\n      if (!video) {\n        const videoElement = document.createElement(\"video\");\n        videoElement.id = \"video\";\n        videoElement.setAttribute(\"class\", options.className || \"\"); // Don't flip video feed if camera is rear facing\n\n        if (options.position !== 'rear') {\n          videoElement.setAttribute(\"style\", \"-webkit-transform: scaleX(-1); transform: scaleX(-1);\");\n        }\n\n        const userAgent = navigator.userAgent.toLowerCase();\n        const isSafari = userAgent.includes('safari') && !userAgent.includes('chrome'); // Safari on iOS needs to have the autoplay, muted and playsinline attributes set for video.play() to be successful\n        // Without these attributes videoElement.play() will throw a NotAllowedError\n        // https://developer.apple.com/documentation/webkit/delivering_video_content_for_safari\n\n        if (isSafari) {\n          videoElement.setAttribute('autoplay', 'true');\n          videoElement.setAttribute('muted', 'true');\n          videoElement.setAttribute('playsinline', 'true');\n        }\n\n        parent.appendChild(videoElement);\n\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n          const constraints = {\n            video: true\n          };\n\n          if (options.position === 'rear') {\n            constraints.video = {\n              facingMode: 'environment'\n            };\n            this.isBackCamera = true;\n          } else {\n            this.isBackCamera = false;\n          }\n\n          navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n            //video.src = window.URL.createObjectURL(stream);\n            videoElement.srcObject = stream;\n            videoElement.play();\n            resolve({});\n          }, err => {\n            reject(err);\n          });\n        }\n      } else {\n        reject({\n          message: \"camera already started\"\n        });\n      }\n    });\n  }\n\n  async stop() {\n    const video = document.getElementById(\"video\");\n\n    if (video) {\n      video.pause();\n      const st = video.srcObject;\n      const tracks = st.getTracks();\n\n      for (var i = 0; i < tracks.length; i++) {\n        var track = tracks[i];\n        track.stop();\n      }\n\n      video.remove();\n    }\n  }\n\n  async capture(_options) {\n    return new Promise((resolve, _) => {\n      const video = document.getElementById(\"video\");\n      const canvas = document.createElement(\"canvas\"); // video.width = video.offsetWidth;\n\n      const context = canvas.getContext(\"2d\");\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight; // flip horizontally back camera isn't used\n\n      if (!this.isBackCamera) {\n        context.translate(video.videoWidth, 0);\n        context.scale(-1, 1);\n      }\n\n      context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\n      resolve({\n        value: canvas.toDataURL(\"image/png\").replace(\"data:image/png;base64,\", \"\")\n      });\n    });\n  }\n\n  async captureSample(_options) {\n    return this.capture(_options);\n  }\n\n  async getSupportedFlashModes() {\n    throw new Error('getSupportedFlashModes not supported under the web platform');\n  }\n\n  async setFlashMode(_options) {\n    throw new Error('setFlashMode not supported under the web platform');\n  }\n\n  async flip() {\n    throw new Error('flip not supported under the web platform');\n  }\n\n  async setOpacity(_options) {\n    const video = document.getElementById(\"video\");\n\n    if (!!video && !!_options['opacity']) {\n      video.style.setProperty(\"opacity\", _options['opacity'].toString());\n    }\n  }\n\n}\nconst CameraPreview = new CameraPreviewWeb();\nexport { CameraPreview };\nimport { registerWebPlugin } from \"@capacitor/core\";\nregisterWebPlugin(CameraPreview);","map":{"version":3,"sources":["../../src/web.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { WebPlugin } from \"@capacitor/core\";\nexport class CameraPreviewWeb extends WebPlugin {\n    constructor() {\n        super({\n            name: \"CameraPreview\",\n            platforms: [\"web\"],\n        });\n    }\n    async start(options) {\n        return new Promise(async (resolve, reject) => {\n            await navigator.mediaDevices.getUserMedia({\n                audio: !options.disableAudio,\n                video: true\n            }).then((stream) => {\n                // Stop any existing stream so we can request media with different constraints based on user input\n                stream.getTracks().forEach((track) => track.stop());\n            }).catch(error => {\n                reject(error);\n            });\n            const video = document.getElementById(\"video\");\n            const parent = document.getElementById(options.parent);\n            if (!video) {\n                const videoElement = document.createElement(\"video\");\n                videoElement.id = \"video\";\n                videoElement.setAttribute(\"class\", options.className || \"\");\n                // Don't flip video feed if camera is rear facing\n                if (options.position !== 'rear') {\n                    videoElement.setAttribute(\"style\", \"-webkit-transform: scaleX(-1); transform: scaleX(-1);\");\n                }\n                const userAgent = navigator.userAgent.toLowerCase();\n                const isSafari = userAgent.includes('safari') && !userAgent.includes('chrome');\n                // Safari on iOS needs to have the autoplay, muted and playsinline attributes set for video.play() to be successful\n                // Without these attributes videoElement.play() will throw a NotAllowedError\n                // https://developer.apple.com/documentation/webkit/delivering_video_content_for_safari\n                if (isSafari) {\n                    videoElement.setAttribute('autoplay', 'true');\n                    videoElement.setAttribute('muted', 'true');\n                    videoElement.setAttribute('playsinline', 'true');\n                }\n                parent.appendChild(videoElement);\n                if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n                    const constraints = {\n                        video: true,\n                    };\n                    if (options.position === 'rear') {\n                        constraints.video = { facingMode: 'environment' };\n                        this.isBackCamera = true;\n                    }\n                    else {\n                        this.isBackCamera = false;\n                    }\n                    navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n                        //video.src = window.URL.createObjectURL(stream);\n                        videoElement.srcObject = stream;\n                        videoElement.play();\n                        resolve({});\n                    }, (err) => {\n                        reject(err);\n                    });\n                }\n            }\n            else {\n                reject({ message: \"camera already started\" });\n            }\n        });\n    }\n    async stop() {\n        const video = document.getElementById(\"video\");\n        if (video) {\n            video.pause();\n            const st = video.srcObject;\n            const tracks = st.getTracks();\n            for (var i = 0; i < tracks.length; i++) {\n                var track = tracks[i];\n                track.stop();\n            }\n            video.remove();\n        }\n    }\n    async capture(_options) {\n        return new Promise((resolve, _) => {\n            const video = document.getElementById(\"video\");\n            const canvas = document.createElement(\"canvas\");\n            // video.width = video.offsetWidth;\n            const context = canvas.getContext(\"2d\");\n            canvas.width = video.videoWidth;\n            canvas.height = video.videoHeight;\n            // flip horizontally back camera isn't used\n            if (!this.isBackCamera) {\n                context.translate(video.videoWidth, 0);\n                context.scale(-1, 1);\n            }\n            context.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\n            resolve({\n                value: canvas\n                    .toDataURL(\"image/png\")\n                    .replace(\"data:image/png;base64,\", \"\"),\n            });\n        });\n    }\n    async captureSample(_options) {\n        return this.capture(_options);\n    }\n    async getSupportedFlashModes() {\n        throw new Error('getSupportedFlashModes not supported under the web platform');\n    }\n    async setFlashMode(_options) {\n        throw new Error('setFlashMode not supported under the web platform');\n    }\n    async flip() {\n        throw new Error('flip not supported under the web platform');\n    }\n    async setOpacity(_options) {\n        const video = document.getElementById(\"video\");\n        if (!!video && !!_options['opacity']) {\n            video.style.setProperty(\"opacity\", _options['opacity'].toString());\n        }\n    }\n}\nconst CameraPreview = new CameraPreviewWeb();\nexport { CameraPreview };\nimport { registerWebPlugin } from \"@capacitor/core\";\nregisterWebPlugin(CameraPreview);\n//# sourceMappingURL=web.js.map"]},"metadata":{},"sourceType":"module"}